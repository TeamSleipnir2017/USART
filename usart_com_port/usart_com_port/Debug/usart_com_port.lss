
usart_com_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000096c  20070000  000828a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000d4  2007096c  0008320c  0002096c  2**2
                  ALLOC
  3 .stack        00002000  20070a40  000832e0  0002096c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002096c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020995  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008c0d  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a16  00000000  00000000  000295fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003c48  00000000  00000000  0002b011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008d8  00000000  00000000  0002ec59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000830  00000000  00000000  0002f531  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000165cb  00000000  00000000  0002fd61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ae66  00000000  00000000  0004632c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063622  00000000  00000000  00051192  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bf0  00000000  00000000  000b47b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a40 	.word	0x20072a40
   80004:	00080745 	.word	0x00080745
   80008:	00080741 	.word	0x00080741
   8000c:	00080741 	.word	0x00080741
   80010:	00080741 	.word	0x00080741
   80014:	00080741 	.word	0x00080741
   80018:	00080741 	.word	0x00080741
	...
   8002c:	00080741 	.word	0x00080741
   80030:	00080741 	.word	0x00080741
   80034:	00000000 	.word	0x00000000
   80038:	00080741 	.word	0x00080741
   8003c:	00080741 	.word	0x00080741
   80040:	00080741 	.word	0x00080741
   80044:	00080741 	.word	0x00080741
   80048:	00080741 	.word	0x00080741
   8004c:	00080741 	.word	0x00080741
   80050:	00080741 	.word	0x00080741
   80054:	00080741 	.word	0x00080741
   80058:	00080741 	.word	0x00080741
   8005c:	00080741 	.word	0x00080741
   80060:	00080741 	.word	0x00080741
   80064:	00080741 	.word	0x00080741
   80068:	00000000 	.word	0x00000000
   8006c:	000805b1 	.word	0x000805b1
   80070:	000805c5 	.word	0x000805c5
   80074:	000805d9 	.word	0x000805d9
   80078:	000805ed 	.word	0x000805ed
	...
   80084:	00080741 	.word	0x00080741
   80088:	00080741 	.word	0x00080741
   8008c:	00080741 	.word	0x00080741
   80090:	00080741 	.word	0x00080741
   80094:	00080741 	.word	0x00080741
   80098:	00080741 	.word	0x00080741
   8009c:	00080741 	.word	0x00080741
   800a0:	00080741 	.word	0x00080741
   800a4:	00000000 	.word	0x00000000
   800a8:	00080741 	.word	0x00080741
   800ac:	00080741 	.word	0x00080741
   800b0:	00080741 	.word	0x00080741
   800b4:	00080741 	.word	0x00080741
   800b8:	00080741 	.word	0x00080741
   800bc:	00080741 	.word	0x00080741
   800c0:	00080741 	.word	0x00080741
   800c4:	00080741 	.word	0x00080741
   800c8:	00080741 	.word	0x00080741
   800cc:	00080741 	.word	0x00080741
   800d0:	00080741 	.word	0x00080741
   800d4:	00080741 	.word	0x00080741
   800d8:	00080741 	.word	0x00080741
   800dc:	00080741 	.word	0x00080741
   800e0:	00080741 	.word	0x00080741
   800e4:	00080741 	.word	0x00080741
   800e8:	00080741 	.word	0x00080741
   800ec:	00080741 	.word	0x00080741
   800f0:	00080741 	.word	0x00080741

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007096c 	.word	0x2007096c
   80110:	00000000 	.word	0x00000000
   80114:	000828a0 	.word	0x000828a0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070970 	.word	0x20070970
   80144:	000828a0 	.word	0x000828a0
   80148:	000828a0 	.word	0x000828a0
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b990      	cbnz	r0, 80178 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0f      	ble.n	8017e <_read+0x2e>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42a7      	cmp	r7, r4
   80170:	d1f8      	bne.n	80164 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80172:	4640      	mov	r0, r8
   80174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80178:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8017c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8017e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80184:	20070a38 	.word	0x20070a38
   80188:	20070a30 	.word	0x20070a30

0008018c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8018c:	3801      	subs	r0, #1
   8018e:	2802      	cmp	r0, #2
   80190:	d815      	bhi.n	801be <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80196:	460e      	mov	r6, r1
   80198:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8019a:	b19a      	cbz	r2, 801c4 <_write+0x38>
   8019c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8019e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801d8 <_write+0x4c>
   801a2:	4f0c      	ldr	r7, [pc, #48]	; (801d4 <_write+0x48>)
   801a4:	f8d8 0000 	ldr.w	r0, [r8]
   801a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   801ac:	683b      	ldr	r3, [r7, #0]
   801ae:	4798      	blx	r3
   801b0:	2800      	cmp	r0, #0
   801b2:	db0a      	blt.n	801ca <_write+0x3e>
   801b4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801b6:	3c01      	subs	r4, #1
   801b8:	d1f4      	bne.n	801a4 <_write+0x18>
   801ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   801be:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   801c2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801c4:	2000      	movs	r0, #0
   801c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   801ca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801d2:	bf00      	nop
   801d4:	20070a34 	.word	0x20070a34
   801d8:	20070a38 	.word	0x20070a38

000801dc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   801dc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   801de:	23ac      	movs	r3, #172	; 0xac
   801e0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   801e2:	680b      	ldr	r3, [r1, #0]
   801e4:	684a      	ldr	r2, [r1, #4]
   801e6:	fbb3 f3f2 	udiv	r3, r3, r2
   801ea:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   801ec:	1e5c      	subs	r4, r3, #1
   801ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   801f2:	4294      	cmp	r4, r2
   801f4:	d80a      	bhi.n	8020c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   801f6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   801f8:	688b      	ldr	r3, [r1, #8]
   801fa:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   801fc:	f240 2302 	movw	r3, #514	; 0x202
   80200:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80204:	2350      	movs	r3, #80	; 0x50
   80206:	6003      	str	r3, [r0, #0]

	return 0;
   80208:	2000      	movs	r0, #0
   8020a:	e000      	b.n	8020e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8020c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8020e:	bc10      	pop	{r4}
   80210:	4770      	bx	lr
   80212:	bf00      	nop

00080214 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80214:	6943      	ldr	r3, [r0, #20]
   80216:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8021a:	bf1a      	itte	ne
   8021c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8021e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80220:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80222:	4770      	bx	lr

00080224 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80224:	6943      	ldr	r3, [r0, #20]
   80226:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8022a:	bf1d      	ittte	ne
   8022c:	6983      	ldrne	r3, [r0, #24]
   8022e:	700b      	strbne	r3, [r1, #0]
	return 0;
   80230:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80232:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80234:	4770      	bx	lr
   80236:	bf00      	nop

00080238 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80238:	6943      	ldr	r3, [r0, #20]
   8023a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8023e:	bf1d      	ittte	ne
   80240:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80244:	61c1      	strne	r1, [r0, #28]
	return 0;
   80246:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80248:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8024a:	4770      	bx	lr

0008024c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8024c:	6943      	ldr	r3, [r0, #20]
   8024e:	f013 0f01 	tst.w	r3, #1
   80252:	d005      	beq.n	80260 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80254:	6983      	ldr	r3, [r0, #24]
   80256:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8025a:	600b      	str	r3, [r1, #0]

	return 0;
   8025c:	2000      	movs	r0, #0
   8025e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80260:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80262:	4770      	bx	lr

00080264 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80264:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80266:	480e      	ldr	r0, [pc, #56]	; (802a0 <sysclk_init+0x3c>)
   80268:	4b0e      	ldr	r3, [pc, #56]	; (802a4 <sysclk_init+0x40>)
   8026a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8026c:	213e      	movs	r1, #62	; 0x3e
   8026e:	2000      	movs	r0, #0
   80270:	4b0d      	ldr	r3, [pc, #52]	; (802a8 <sysclk_init+0x44>)
   80272:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80274:	4c0d      	ldr	r4, [pc, #52]	; (802ac <sysclk_init+0x48>)
   80276:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80278:	2800      	cmp	r0, #0
   8027a:	d0fc      	beq.n	80276 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8027c:	4b0c      	ldr	r3, [pc, #48]	; (802b0 <sysclk_init+0x4c>)
   8027e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80280:	4a0c      	ldr	r2, [pc, #48]	; (802b4 <sysclk_init+0x50>)
   80282:	4b0d      	ldr	r3, [pc, #52]	; (802b8 <sysclk_init+0x54>)
   80284:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80286:	4c0d      	ldr	r4, [pc, #52]	; (802bc <sysclk_init+0x58>)
   80288:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8028a:	2800      	cmp	r0, #0
   8028c:	d0fc      	beq.n	80288 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8028e:	2010      	movs	r0, #16
   80290:	4b0b      	ldr	r3, [pc, #44]	; (802c0 <sysclk_init+0x5c>)
   80292:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80294:	4b0b      	ldr	r3, [pc, #44]	; (802c4 <sysclk_init+0x60>)
   80296:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80298:	4801      	ldr	r0, [pc, #4]	; (802a0 <sysclk_init+0x3c>)
   8029a:	4b02      	ldr	r3, [pc, #8]	; (802a4 <sysclk_init+0x40>)
   8029c:	4798      	blx	r3
   8029e:	bd10      	pop	{r4, pc}
   802a0:	0501bd00 	.word	0x0501bd00
   802a4:	200700a5 	.word	0x200700a5
   802a8:	00080669 	.word	0x00080669
   802ac:	000806bd 	.word	0x000806bd
   802b0:	000806cd 	.word	0x000806cd
   802b4:	200d3f01 	.word	0x200d3f01
   802b8:	400e0600 	.word	0x400e0600
   802bc:	000806dd 	.word	0x000806dd
   802c0:	00080601 	.word	0x00080601
   802c4:	000807f1 	.word	0x000807f1

000802c8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   802c8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   802ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   802ce:	4b16      	ldr	r3, [pc, #88]	; (80328 <board_init+0x60>)
   802d0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802d2:	200b      	movs	r0, #11
   802d4:	4c15      	ldr	r4, [pc, #84]	; (8032c <board_init+0x64>)
   802d6:	47a0      	blx	r4
   802d8:	200c      	movs	r0, #12
   802da:	47a0      	blx	r4
   802dc:	200d      	movs	r0, #13
   802de:	47a0      	blx	r4
   802e0:	200e      	movs	r0, #14
   802e2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   802e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802e8:	203b      	movs	r0, #59	; 0x3b
   802ea:	4c11      	ldr	r4, [pc, #68]	; (80330 <board_init+0x68>)
   802ec:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   802ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802f2:	2055      	movs	r0, #85	; 0x55
   802f4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   802f6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802fa:	2056      	movs	r0, #86	; 0x56
   802fc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   802fe:	490d      	ldr	r1, [pc, #52]	; (80334 <board_init+0x6c>)
   80300:	2068      	movs	r0, #104	; 0x68
   80302:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80304:	490c      	ldr	r1, [pc, #48]	; (80338 <board_init+0x70>)
   80306:	205c      	movs	r0, #92	; 0x5c
   80308:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8030a:	4a0c      	ldr	r2, [pc, #48]	; (8033c <board_init+0x74>)
   8030c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80310:	480b      	ldr	r0, [pc, #44]	; (80340 <board_init+0x78>)
   80312:	4b0c      	ldr	r3, [pc, #48]	; (80344 <board_init+0x7c>)
   80314:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80316:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8031a:	202b      	movs	r0, #43	; 0x2b
   8031c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8031e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80322:	202a      	movs	r0, #42	; 0x2a
   80324:	47a0      	blx	r4
   80326:	bd10      	pop	{r4, pc}
   80328:	400e1a50 	.word	0x400e1a50
   8032c:	000806ed 	.word	0x000806ed
   80330:	000803ed 	.word	0x000803ed
   80334:	28000079 	.word	0x28000079
   80338:	28000001 	.word	0x28000001
   8033c:	08000001 	.word	0x08000001
   80340:	400e0e00 	.word	0x400e0e00
   80344:	000804c1 	.word	0x000804c1

00080348 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80348:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8034a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8034e:	d016      	beq.n	8037e <pio_set_peripheral+0x36>
   80350:	d804      	bhi.n	8035c <pio_set_peripheral+0x14>
   80352:	b1c1      	cbz	r1, 80386 <pio_set_peripheral+0x3e>
   80354:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80358:	d00a      	beq.n	80370 <pio_set_peripheral+0x28>
   8035a:	e013      	b.n	80384 <pio_set_peripheral+0x3c>
   8035c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80360:	d011      	beq.n	80386 <pio_set_peripheral+0x3e>
   80362:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80366:	d00e      	beq.n	80386 <pio_set_peripheral+0x3e>
   80368:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8036c:	d10a      	bne.n	80384 <pio_set_peripheral+0x3c>
   8036e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80370:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80372:	6f03      	ldr	r3, [r0, #112]	; 0x70
   80374:	400b      	ands	r3, r1
   80376:	ea23 0302 	bic.w	r3, r3, r2
   8037a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8037c:	e002      	b.n	80384 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8037e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80380:	4313      	orrs	r3, r2
   80382:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80384:	6042      	str	r2, [r0, #4]
   80386:	4770      	bx	lr

00080388 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80388:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8038a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8038e:	bf14      	ite	ne
   80390:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80392:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80394:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80398:	bf14      	ite	ne
   8039a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8039c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8039e:	f012 0f02 	tst.w	r2, #2
   803a2:	d002      	beq.n	803aa <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   803a4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   803a8:	e004      	b.n	803b4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   803aa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   803ae:	bf18      	it	ne
   803b0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   803b4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   803b6:	6001      	str	r1, [r0, #0]
   803b8:	4770      	bx	lr
   803ba:	bf00      	nop

000803bc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   803bc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   803be:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803c0:	9c01      	ldr	r4, [sp, #4]
   803c2:	b10c      	cbz	r4, 803c8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   803c4:	6641      	str	r1, [r0, #100]	; 0x64
   803c6:	e000      	b.n	803ca <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803c8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   803ca:	b10b      	cbz	r3, 803d0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   803cc:	6501      	str	r1, [r0, #80]	; 0x50
   803ce:	e000      	b.n	803d2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   803d0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   803d2:	b10a      	cbz	r2, 803d8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   803d4:	6301      	str	r1, [r0, #48]	; 0x30
   803d6:	e000      	b.n	803da <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   803d8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   803da:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   803dc:	6001      	str	r1, [r0, #0]
}
   803de:	bc10      	pop	{r4}
   803e0:	4770      	bx	lr
   803e2:	bf00      	nop

000803e4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   803e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   803e6:	4770      	bx	lr

000803e8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   803e8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   803ea:	4770      	bx	lr

000803ec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   803ec:	b570      	push	{r4, r5, r6, lr}
   803ee:	b082      	sub	sp, #8
   803f0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   803f2:	0943      	lsrs	r3, r0, #5
   803f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   803f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   803fc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   803fe:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80402:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80406:	d030      	beq.n	8046a <pio_configure_pin+0x7e>
   80408:	d806      	bhi.n	80418 <pio_configure_pin+0x2c>
   8040a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8040e:	d00a      	beq.n	80426 <pio_configure_pin+0x3a>
   80410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80414:	d018      	beq.n	80448 <pio_configure_pin+0x5c>
   80416:	e049      	b.n	804ac <pio_configure_pin+0xc0>
   80418:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8041c:	d030      	beq.n	80480 <pio_configure_pin+0x94>
   8041e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80422:	d02d      	beq.n	80480 <pio_configure_pin+0x94>
   80424:	e042      	b.n	804ac <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80426:	f000 001f 	and.w	r0, r0, #31
   8042a:	2601      	movs	r6, #1
   8042c:	4086      	lsls	r6, r0
   8042e:	4632      	mov	r2, r6
   80430:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80434:	4620      	mov	r0, r4
   80436:	4b1f      	ldr	r3, [pc, #124]	; (804b4 <pio_configure_pin+0xc8>)
   80438:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8043a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8043e:	bf14      	ite	ne
   80440:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80442:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80444:	2001      	movs	r0, #1
   80446:	e032      	b.n	804ae <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80448:	f000 001f 	and.w	r0, r0, #31
   8044c:	2601      	movs	r6, #1
   8044e:	4086      	lsls	r6, r0
   80450:	4632      	mov	r2, r6
   80452:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80456:	4620      	mov	r0, r4
   80458:	4b16      	ldr	r3, [pc, #88]	; (804b4 <pio_configure_pin+0xc8>)
   8045a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8045c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80460:	bf14      	ite	ne
   80462:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80464:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80466:	2001      	movs	r0, #1
   80468:	e021      	b.n	804ae <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8046a:	f000 011f 	and.w	r1, r0, #31
   8046e:	2601      	movs	r6, #1
   80470:	462a      	mov	r2, r5
   80472:	fa06 f101 	lsl.w	r1, r6, r1
   80476:	4620      	mov	r0, r4
   80478:	4b0f      	ldr	r3, [pc, #60]	; (804b8 <pio_configure_pin+0xcc>)
   8047a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8047c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8047e:	e016      	b.n	804ae <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80480:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   80484:	f000 011f 	and.w	r1, r0, #31
   80488:	2601      	movs	r6, #1
   8048a:	ea05 0306 	and.w	r3, r5, r6
   8048e:	9300      	str	r3, [sp, #0]
   80490:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80494:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80498:	bf14      	ite	ne
   8049a:	2200      	movne	r2, #0
   8049c:	2201      	moveq	r2, #1
   8049e:	fa06 f101 	lsl.w	r1, r6, r1
   804a2:	4620      	mov	r0, r4
   804a4:	4c05      	ldr	r4, [pc, #20]	; (804bc <pio_configure_pin+0xd0>)
   804a6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804a8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804aa:	e000      	b.n	804ae <pio_configure_pin+0xc2>

	default:
		return 0;
   804ac:	2000      	movs	r0, #0
	}

	return 1;
}
   804ae:	b002      	add	sp, #8
   804b0:	bd70      	pop	{r4, r5, r6, pc}
   804b2:	bf00      	nop
   804b4:	00080349 	.word	0x00080349
   804b8:	00080389 	.word	0x00080389
   804bc:	000803bd 	.word	0x000803bd

000804c0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   804c0:	b570      	push	{r4, r5, r6, lr}
   804c2:	b082      	sub	sp, #8
   804c4:	4605      	mov	r5, r0
   804c6:	460e      	mov	r6, r1
   804c8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804ca:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   804ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804d2:	d026      	beq.n	80522 <pio_configure_pin_group+0x62>
   804d4:	d806      	bhi.n	804e4 <pio_configure_pin_group+0x24>
   804d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804da:	d00a      	beq.n	804f2 <pio_configure_pin_group+0x32>
   804dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   804e0:	d013      	beq.n	8050a <pio_configure_pin_group+0x4a>
   804e2:	e034      	b.n	8054e <pio_configure_pin_group+0x8e>
   804e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   804e8:	d01f      	beq.n	8052a <pio_configure_pin_group+0x6a>
   804ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   804ee:	d01c      	beq.n	8052a <pio_configure_pin_group+0x6a>
   804f0:	e02d      	b.n	8054e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   804f2:	460a      	mov	r2, r1
   804f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804f8:	4b16      	ldr	r3, [pc, #88]	; (80554 <pio_configure_pin_group+0x94>)
   804fa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804fc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80500:	bf14      	ite	ne
   80502:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80504:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80506:	2001      	movs	r0, #1
   80508:	e022      	b.n	80550 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8050a:	460a      	mov	r2, r1
   8050c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80510:	4b10      	ldr	r3, [pc, #64]	; (80554 <pio_configure_pin_group+0x94>)
   80512:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80514:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80518:	bf14      	ite	ne
   8051a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8051c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8051e:	2001      	movs	r0, #1
   80520:	e016      	b.n	80550 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80522:	4b0d      	ldr	r3, [pc, #52]	; (80558 <pio_configure_pin_group+0x98>)
   80524:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80526:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80528:	e012      	b.n	80550 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8052a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   8052e:	f004 0301 	and.w	r3, r4, #1
   80532:	9300      	str	r3, [sp, #0]
   80534:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80538:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8053c:	bf14      	ite	ne
   8053e:	2200      	movne	r2, #0
   80540:	2201      	moveq	r2, #1
   80542:	4631      	mov	r1, r6
   80544:	4628      	mov	r0, r5
   80546:	4c05      	ldr	r4, [pc, #20]	; (8055c <pio_configure_pin_group+0x9c>)
   80548:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8054a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8054c:	e000      	b.n	80550 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8054e:	2000      	movs	r0, #0
	}

	return 1;
}
   80550:	b002      	add	sp, #8
   80552:	bd70      	pop	{r4, r5, r6, pc}
   80554:	00080349 	.word	0x00080349
   80558:	00080389 	.word	0x00080389
   8055c:	000803bd 	.word	0x000803bd

00080560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80564:	4604      	mov	r4, r0
   80566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <pio_handler_process+0x44>)
   8056a:	4798      	blx	r3
   8056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8056e:	4620      	mov	r0, r4
   80570:	4b0d      	ldr	r3, [pc, #52]	; (805a8 <pio_handler_process+0x48>)
   80572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80574:	4005      	ands	r5, r0
   80576:	d013      	beq.n	805a0 <pio_handler_process+0x40>
   80578:	4c0c      	ldr	r4, [pc, #48]	; (805ac <pio_handler_process+0x4c>)
   8057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8057e:	6823      	ldr	r3, [r4, #0]
   80580:	4543      	cmp	r3, r8
   80582:	d108      	bne.n	80596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80584:	6861      	ldr	r1, [r4, #4]
   80586:	4229      	tst	r1, r5
   80588:	d005      	beq.n	80596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8058a:	68e3      	ldr	r3, [r4, #12]
   8058c:	4640      	mov	r0, r8
   8058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80590:	6863      	ldr	r3, [r4, #4]
   80592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80596:	42b4      	cmp	r4, r6
   80598:	d002      	beq.n	805a0 <pio_handler_process+0x40>
   8059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8059c:	2d00      	cmp	r5, #0
   8059e:	d1ee      	bne.n	8057e <pio_handler_process+0x1e>
   805a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805a4:	000803e5 	.word	0x000803e5
   805a8:	000803e9 	.word	0x000803e9
   805ac:	20070988 	.word	0x20070988

000805b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   805b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   805b2:	210b      	movs	r1, #11
   805b4:	4801      	ldr	r0, [pc, #4]	; (805bc <PIOA_Handler+0xc>)
   805b6:	4b02      	ldr	r3, [pc, #8]	; (805c0 <PIOA_Handler+0x10>)
   805b8:	4798      	blx	r3
   805ba:	bd08      	pop	{r3, pc}
   805bc:	400e0e00 	.word	0x400e0e00
   805c0:	00080561 	.word	0x00080561

000805c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   805c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   805c6:	210c      	movs	r1, #12
   805c8:	4801      	ldr	r0, [pc, #4]	; (805d0 <PIOB_Handler+0xc>)
   805ca:	4b02      	ldr	r3, [pc, #8]	; (805d4 <PIOB_Handler+0x10>)
   805cc:	4798      	blx	r3
   805ce:	bd08      	pop	{r3, pc}
   805d0:	400e1000 	.word	0x400e1000
   805d4:	00080561 	.word	0x00080561

000805d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   805d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   805da:	210d      	movs	r1, #13
   805dc:	4801      	ldr	r0, [pc, #4]	; (805e4 <PIOC_Handler+0xc>)
   805de:	4b02      	ldr	r3, [pc, #8]	; (805e8 <PIOC_Handler+0x10>)
   805e0:	4798      	blx	r3
   805e2:	bd08      	pop	{r3, pc}
   805e4:	400e1200 	.word	0x400e1200
   805e8:	00080561 	.word	0x00080561

000805ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   805ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   805ee:	210e      	movs	r1, #14
   805f0:	4801      	ldr	r0, [pc, #4]	; (805f8 <PIOD_Handler+0xc>)
   805f2:	4b02      	ldr	r3, [pc, #8]	; (805fc <PIOD_Handler+0x10>)
   805f4:	4798      	blx	r3
   805f6:	bd08      	pop	{r3, pc}
   805f8:	400e1400 	.word	0x400e1400
   805fc:	00080561 	.word	0x00080561

00080600 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80600:	4a18      	ldr	r2, [pc, #96]	; (80664 <pmc_switch_mck_to_pllack+0x64>)
   80602:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80608:	4318      	orrs	r0, r3
   8060a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8060c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8060e:	f013 0f08 	tst.w	r3, #8
   80612:	d003      	beq.n	8061c <pmc_switch_mck_to_pllack+0x1c>
   80614:	e009      	b.n	8062a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80616:	3b01      	subs	r3, #1
   80618:	d103      	bne.n	80622 <pmc_switch_mck_to_pllack+0x22>
   8061a:	e01e      	b.n	8065a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8061c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80620:	4910      	ldr	r1, [pc, #64]	; (80664 <pmc_switch_mck_to_pllack+0x64>)
   80622:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80624:	f012 0f08 	tst.w	r2, #8
   80628:	d0f5      	beq.n	80616 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8062a:	4a0e      	ldr	r2, [pc, #56]	; (80664 <pmc_switch_mck_to_pllack+0x64>)
   8062c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8062e:	f023 0303 	bic.w	r3, r3, #3
   80632:	f043 0302 	orr.w	r3, r3, #2
   80636:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80638:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8063a:	f010 0008 	ands.w	r0, r0, #8
   8063e:	d004      	beq.n	8064a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80640:	2000      	movs	r0, #0
   80642:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80644:	3b01      	subs	r3, #1
   80646:	d103      	bne.n	80650 <pmc_switch_mck_to_pllack+0x50>
   80648:	e009      	b.n	8065e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8064a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8064e:	4905      	ldr	r1, [pc, #20]	; (80664 <pmc_switch_mck_to_pllack+0x64>)
   80650:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80652:	f012 0f08 	tst.w	r2, #8
   80656:	d0f5      	beq.n	80644 <pmc_switch_mck_to_pllack+0x44>
   80658:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8065a:	2001      	movs	r0, #1
   8065c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8065e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80660:	4770      	bx	lr
   80662:	bf00      	nop
   80664:	400e0600 	.word	0x400e0600

00080668 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80668:	b138      	cbz	r0, 8067a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8066a:	4911      	ldr	r1, [pc, #68]	; (806b0 <pmc_switch_mainck_to_xtal+0x48>)
   8066c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8066e:	4a11      	ldr	r2, [pc, #68]	; (806b4 <pmc_switch_mainck_to_xtal+0x4c>)
   80670:	401a      	ands	r2, r3
   80672:	4b11      	ldr	r3, [pc, #68]	; (806b8 <pmc_switch_mainck_to_xtal+0x50>)
   80674:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80676:	620b      	str	r3, [r1, #32]
   80678:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8067a:	480d      	ldr	r0, [pc, #52]	; (806b0 <pmc_switch_mainck_to_xtal+0x48>)
   8067c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8067e:	0209      	lsls	r1, r1, #8
   80680:	b289      	uxth	r1, r1
   80682:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   80686:	f023 0303 	bic.w	r3, r3, #3
   8068a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8068e:	f043 0301 	orr.w	r3, r3, #1
   80692:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80694:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80696:	4602      	mov	r2, r0
   80698:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8069a:	f013 0f01 	tst.w	r3, #1
   8069e:	d0fb      	beq.n	80698 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   806a0:	4a03      	ldr	r2, [pc, #12]	; (806b0 <pmc_switch_mainck_to_xtal+0x48>)
   806a2:	6a13      	ldr	r3, [r2, #32]
   806a4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   806a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   806ac:	6213      	str	r3, [r2, #32]
   806ae:	4770      	bx	lr
   806b0:	400e0600 	.word	0x400e0600
   806b4:	fec8fffc 	.word	0xfec8fffc
   806b8:	01370002 	.word	0x01370002

000806bc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   806bc:	4b02      	ldr	r3, [pc, #8]	; (806c8 <pmc_osc_is_ready_mainck+0xc>)
   806be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806c0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   806c4:	4770      	bx	lr
   806c6:	bf00      	nop
   806c8:	400e0600 	.word	0x400e0600

000806cc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   806cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   806d0:	4b01      	ldr	r3, [pc, #4]	; (806d8 <pmc_disable_pllack+0xc>)
   806d2:	629a      	str	r2, [r3, #40]	; 0x28
   806d4:	4770      	bx	lr
   806d6:	bf00      	nop
   806d8:	400e0600 	.word	0x400e0600

000806dc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   806dc:	4b02      	ldr	r3, [pc, #8]	; (806e8 <pmc_is_locked_pllack+0xc>)
   806de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   806e0:	f000 0002 	and.w	r0, r0, #2
   806e4:	4770      	bx	lr
   806e6:	bf00      	nop
   806e8:	400e0600 	.word	0x400e0600

000806ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   806ec:	282c      	cmp	r0, #44	; 0x2c
   806ee:	d81e      	bhi.n	8072e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   806f0:	281f      	cmp	r0, #31
   806f2:	d80c      	bhi.n	8070e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   806f4:	4b11      	ldr	r3, [pc, #68]	; (8073c <pmc_enable_periph_clk+0x50>)
   806f6:	699a      	ldr	r2, [r3, #24]
   806f8:	2301      	movs	r3, #1
   806fa:	4083      	lsls	r3, r0
   806fc:	4393      	bics	r3, r2
   806fe:	d018      	beq.n	80732 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80700:	2301      	movs	r3, #1
   80702:	fa03 f000 	lsl.w	r0, r3, r0
   80706:	4b0d      	ldr	r3, [pc, #52]	; (8073c <pmc_enable_periph_clk+0x50>)
   80708:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8070a:	2000      	movs	r0, #0
   8070c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8070e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80710:	4b0a      	ldr	r3, [pc, #40]	; (8073c <pmc_enable_periph_clk+0x50>)
   80712:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80716:	2301      	movs	r3, #1
   80718:	4083      	lsls	r3, r0
   8071a:	4393      	bics	r3, r2
   8071c:	d00b      	beq.n	80736 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8071e:	2301      	movs	r3, #1
   80720:	fa03 f000 	lsl.w	r0, r3, r0
   80724:	4b05      	ldr	r3, [pc, #20]	; (8073c <pmc_enable_periph_clk+0x50>)
   80726:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8072a:	2000      	movs	r0, #0
   8072c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8072e:	2001      	movs	r0, #1
   80730:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80732:	2000      	movs	r0, #0
   80734:	4770      	bx	lr
   80736:	2000      	movs	r0, #0
}
   80738:	4770      	bx	lr
   8073a:	bf00      	nop
   8073c:	400e0600 	.word	0x400e0600

00080740 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80740:	e7fe      	b.n	80740 <Dummy_Handler>
   80742:	bf00      	nop

00080744 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80744:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80746:	4b1e      	ldr	r3, [pc, #120]	; (807c0 <Reset_Handler+0x7c>)
   80748:	4a1e      	ldr	r2, [pc, #120]	; (807c4 <Reset_Handler+0x80>)
   8074a:	429a      	cmp	r2, r3
   8074c:	d003      	beq.n	80756 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8074e:	4b1e      	ldr	r3, [pc, #120]	; (807c8 <Reset_Handler+0x84>)
   80750:	4a1b      	ldr	r2, [pc, #108]	; (807c0 <Reset_Handler+0x7c>)
   80752:	429a      	cmp	r2, r3
   80754:	d304      	bcc.n	80760 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80756:	4b1d      	ldr	r3, [pc, #116]	; (807cc <Reset_Handler+0x88>)
   80758:	4a1d      	ldr	r2, [pc, #116]	; (807d0 <Reset_Handler+0x8c>)
   8075a:	429a      	cmp	r2, r3
   8075c:	d30f      	bcc.n	8077e <Reset_Handler+0x3a>
   8075e:	e01a      	b.n	80796 <Reset_Handler+0x52>
   80760:	4917      	ldr	r1, [pc, #92]	; (807c0 <Reset_Handler+0x7c>)
   80762:	4b1c      	ldr	r3, [pc, #112]	; (807d4 <Reset_Handler+0x90>)
   80764:	1a5b      	subs	r3, r3, r1
   80766:	f023 0303 	bic.w	r3, r3, #3
   8076a:	3304      	adds	r3, #4
   8076c:	4a15      	ldr	r2, [pc, #84]	; (807c4 <Reset_Handler+0x80>)
   8076e:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80770:	f852 0b04 	ldr.w	r0, [r2], #4
   80774:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80778:	429a      	cmp	r2, r3
   8077a:	d1f9      	bne.n	80770 <Reset_Handler+0x2c>
   8077c:	e7eb      	b.n	80756 <Reset_Handler+0x12>
   8077e:	4b16      	ldr	r3, [pc, #88]	; (807d8 <Reset_Handler+0x94>)
   80780:	4a16      	ldr	r2, [pc, #88]	; (807dc <Reset_Handler+0x98>)
   80782:	1ad2      	subs	r2, r2, r3
   80784:	f022 0203 	bic.w	r2, r2, #3
   80788:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8078a:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8078c:	2100      	movs	r1, #0
   8078e:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80792:	4293      	cmp	r3, r2
   80794:	d1fb      	bne.n	8078e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80796:	4b12      	ldr	r3, [pc, #72]	; (807e0 <Reset_Handler+0x9c>)
   80798:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8079c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   807a0:	4910      	ldr	r1, [pc, #64]	; (807e4 <Reset_Handler+0xa0>)
   807a2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   807a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   807a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807ac:	d203      	bcs.n	807b6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   807ae:	688b      	ldr	r3, [r1, #8]
   807b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   807b4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   807b6:	4b0c      	ldr	r3, [pc, #48]	; (807e8 <Reset_Handler+0xa4>)
   807b8:	4798      	blx	r3

	/* Branch to main function */
	main();
   807ba:	4b0c      	ldr	r3, [pc, #48]	; (807ec <Reset_Handler+0xa8>)
   807bc:	4798      	blx	r3
   807be:	e7fe      	b.n	807be <Reset_Handler+0x7a>
   807c0:	20070000 	.word	0x20070000
   807c4:	000828a0 	.word	0x000828a0
   807c8:	2007096c 	.word	0x2007096c
   807cc:	20070a40 	.word	0x20070a40
   807d0:	2007096c 	.word	0x2007096c
   807d4:	2007096b 	.word	0x2007096b
   807d8:	20070970 	.word	0x20070970
   807dc:	20070a43 	.word	0x20070a43
   807e0:	00080000 	.word	0x00080000
   807e4:	e000ed00 	.word	0xe000ed00
   807e8:	00080c15 	.word	0x00080c15
   807ec:	00080b41 	.word	0x00080b41

000807f0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   807f0:	4b3e      	ldr	r3, [pc, #248]	; (808ec <SystemCoreClockUpdate+0xfc>)
   807f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807f4:	f003 0303 	and.w	r3, r3, #3
   807f8:	2b03      	cmp	r3, #3
   807fa:	d85f      	bhi.n	808bc <SystemCoreClockUpdate+0xcc>
   807fc:	e8df f003 	tbb	[pc, r3]
   80800:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80804:	4b3a      	ldr	r3, [pc, #232]	; (808f0 <SystemCoreClockUpdate+0x100>)
   80806:	695b      	ldr	r3, [r3, #20]
   80808:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8080c:	bf14      	ite	ne
   8080e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80812:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80816:	4b37      	ldr	r3, [pc, #220]	; (808f4 <SystemCoreClockUpdate+0x104>)
   80818:	601a      	str	r2, [r3, #0]
   8081a:	e04f      	b.n	808bc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8081c:	4b33      	ldr	r3, [pc, #204]	; (808ec <SystemCoreClockUpdate+0xfc>)
   8081e:	6a1b      	ldr	r3, [r3, #32]
   80820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80824:	d003      	beq.n	8082e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80826:	4a34      	ldr	r2, [pc, #208]	; (808f8 <SystemCoreClockUpdate+0x108>)
   80828:	4b32      	ldr	r3, [pc, #200]	; (808f4 <SystemCoreClockUpdate+0x104>)
   8082a:	601a      	str	r2, [r3, #0]
   8082c:	e046      	b.n	808bc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8082e:	4a33      	ldr	r2, [pc, #204]	; (808fc <SystemCoreClockUpdate+0x10c>)
   80830:	4b30      	ldr	r3, [pc, #192]	; (808f4 <SystemCoreClockUpdate+0x104>)
   80832:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80834:	4b2d      	ldr	r3, [pc, #180]	; (808ec <SystemCoreClockUpdate+0xfc>)
   80836:	6a1b      	ldr	r3, [r3, #32]
   80838:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8083c:	2b10      	cmp	r3, #16
   8083e:	d002      	beq.n	80846 <SystemCoreClockUpdate+0x56>
   80840:	2b20      	cmp	r3, #32
   80842:	d004      	beq.n	8084e <SystemCoreClockUpdate+0x5e>
   80844:	e03a      	b.n	808bc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80846:	4a2e      	ldr	r2, [pc, #184]	; (80900 <SystemCoreClockUpdate+0x110>)
   80848:	4b2a      	ldr	r3, [pc, #168]	; (808f4 <SystemCoreClockUpdate+0x104>)
   8084a:	601a      	str	r2, [r3, #0]
				break;
   8084c:	e036      	b.n	808bc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8084e:	4a2a      	ldr	r2, [pc, #168]	; (808f8 <SystemCoreClockUpdate+0x108>)
   80850:	4b28      	ldr	r3, [pc, #160]	; (808f4 <SystemCoreClockUpdate+0x104>)
   80852:	601a      	str	r2, [r3, #0]
				break;
   80854:	e032      	b.n	808bc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80856:	4b25      	ldr	r3, [pc, #148]	; (808ec <SystemCoreClockUpdate+0xfc>)
   80858:	6a1b      	ldr	r3, [r3, #32]
   8085a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8085e:	d003      	beq.n	80868 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80860:	4a25      	ldr	r2, [pc, #148]	; (808f8 <SystemCoreClockUpdate+0x108>)
   80862:	4b24      	ldr	r3, [pc, #144]	; (808f4 <SystemCoreClockUpdate+0x104>)
   80864:	601a      	str	r2, [r3, #0]
   80866:	e012      	b.n	8088e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80868:	4a24      	ldr	r2, [pc, #144]	; (808fc <SystemCoreClockUpdate+0x10c>)
   8086a:	4b22      	ldr	r3, [pc, #136]	; (808f4 <SystemCoreClockUpdate+0x104>)
   8086c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8086e:	4b1f      	ldr	r3, [pc, #124]	; (808ec <SystemCoreClockUpdate+0xfc>)
   80870:	6a1b      	ldr	r3, [r3, #32]
   80872:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80876:	2b10      	cmp	r3, #16
   80878:	d002      	beq.n	80880 <SystemCoreClockUpdate+0x90>
   8087a:	2b20      	cmp	r3, #32
   8087c:	d004      	beq.n	80888 <SystemCoreClockUpdate+0x98>
   8087e:	e006      	b.n	8088e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80880:	4a1f      	ldr	r2, [pc, #124]	; (80900 <SystemCoreClockUpdate+0x110>)
   80882:	4b1c      	ldr	r3, [pc, #112]	; (808f4 <SystemCoreClockUpdate+0x104>)
   80884:	601a      	str	r2, [r3, #0]
				break;
   80886:	e002      	b.n	8088e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80888:	4a1b      	ldr	r2, [pc, #108]	; (808f8 <SystemCoreClockUpdate+0x108>)
   8088a:	4b1a      	ldr	r3, [pc, #104]	; (808f4 <SystemCoreClockUpdate+0x104>)
   8088c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8088e:	4b17      	ldr	r3, [pc, #92]	; (808ec <SystemCoreClockUpdate+0xfc>)
   80890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80892:	f003 0303 	and.w	r3, r3, #3
   80896:	2b02      	cmp	r3, #2
   80898:	d10d      	bne.n	808b6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8089a:	4a14      	ldr	r2, [pc, #80]	; (808ec <SystemCoreClockUpdate+0xfc>)
   8089c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8089e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   808a0:	4814      	ldr	r0, [pc, #80]	; (808f4 <SystemCoreClockUpdate+0x104>)
   808a2:	f3c3 410a 	ubfx	r1, r3, #16, #11
   808a6:	6803      	ldr	r3, [r0, #0]
   808a8:	fb01 3303 	mla	r3, r1, r3, r3
   808ac:	b2d2      	uxtb	r2, r2
   808ae:	fbb3 f3f2 	udiv	r3, r3, r2
   808b2:	6003      	str	r3, [r0, #0]
   808b4:	e002      	b.n	808bc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   808b6:	4a13      	ldr	r2, [pc, #76]	; (80904 <SystemCoreClockUpdate+0x114>)
   808b8:	4b0e      	ldr	r3, [pc, #56]	; (808f4 <SystemCoreClockUpdate+0x104>)
   808ba:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808bc:	4b0b      	ldr	r3, [pc, #44]	; (808ec <SystemCoreClockUpdate+0xfc>)
   808be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808c4:	2b70      	cmp	r3, #112	; 0x70
   808c6:	d107      	bne.n	808d8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   808c8:	4a0a      	ldr	r2, [pc, #40]	; (808f4 <SystemCoreClockUpdate+0x104>)
   808ca:	6813      	ldr	r3, [r2, #0]
   808cc:	490e      	ldr	r1, [pc, #56]	; (80908 <SystemCoreClockUpdate+0x118>)
   808ce:	fba1 1303 	umull	r1, r3, r1, r3
   808d2:	085b      	lsrs	r3, r3, #1
   808d4:	6013      	str	r3, [r2, #0]
   808d6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   808d8:	4b04      	ldr	r3, [pc, #16]	; (808ec <SystemCoreClockUpdate+0xfc>)
   808da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808dc:	4905      	ldr	r1, [pc, #20]	; (808f4 <SystemCoreClockUpdate+0x104>)
   808de:	f3c3 1202 	ubfx	r2, r3, #4, #3
   808e2:	680b      	ldr	r3, [r1, #0]
   808e4:	40d3      	lsrs	r3, r2
   808e6:	600b      	str	r3, [r1, #0]
   808e8:	4770      	bx	lr
   808ea:	bf00      	nop
   808ec:	400e0600 	.word	0x400e0600
   808f0:	400e1a10 	.word	0x400e1a10
   808f4:	2007012c 	.word	0x2007012c
   808f8:	00b71b00 	.word	0x00b71b00
   808fc:	003d0900 	.word	0x003d0900
   80900:	007a1200 	.word	0x007a1200
   80904:	0e4e1c00 	.word	0x0e4e1c00
   80908:	aaaaaaab 	.word	0xaaaaaaab

0008090c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8090c:	4b09      	ldr	r3, [pc, #36]	; (80934 <_sbrk+0x28>)
   8090e:	681b      	ldr	r3, [r3, #0]
   80910:	b913      	cbnz	r3, 80918 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80912:	4a09      	ldr	r2, [pc, #36]	; (80938 <_sbrk+0x2c>)
   80914:	4b07      	ldr	r3, [pc, #28]	; (80934 <_sbrk+0x28>)
   80916:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80918:	4b06      	ldr	r3, [pc, #24]	; (80934 <_sbrk+0x28>)
   8091a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8091c:	181a      	adds	r2, r3, r0
   8091e:	4907      	ldr	r1, [pc, #28]	; (8093c <_sbrk+0x30>)
   80920:	4291      	cmp	r1, r2
   80922:	db04      	blt.n	8092e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80924:	4610      	mov	r0, r2
   80926:	4a03      	ldr	r2, [pc, #12]	; (80934 <_sbrk+0x28>)
   80928:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8092a:	4618      	mov	r0, r3
   8092c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8092e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80932:	4770      	bx	lr
   80934:	200709f8 	.word	0x200709f8
   80938:	20072a40 	.word	0x20072a40
   8093c:	20087ffc 	.word	0x20087ffc

00080940 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80940:	f04f 30ff 	mov.w	r0, #4294967295
   80944:	4770      	bx	lr
   80946:	bf00      	nop

00080948 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8094c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8094e:	2000      	movs	r0, #0
   80950:	4770      	bx	lr
   80952:	bf00      	nop

00080954 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80954:	2001      	movs	r0, #1
   80956:	4770      	bx	lr

00080958 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80958:	2000      	movs	r0, #0
   8095a:	4770      	bx	lr

0008095c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8095c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8095e:	b083      	sub	sp, #12
   80960:	4604      	mov	r4, r0
   80962:	460d      	mov	r5, r1
	uint32_t val = 0;
   80964:	2300      	movs	r3, #0
   80966:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80968:	4b1f      	ldr	r3, [pc, #124]	; (809e8 <usart_serial_getchar+0x8c>)
   8096a:	4298      	cmp	r0, r3
   8096c:	d107      	bne.n	8097e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8096e:	461f      	mov	r7, r3
   80970:	4e1e      	ldr	r6, [pc, #120]	; (809ec <usart_serial_getchar+0x90>)
   80972:	4629      	mov	r1, r5
   80974:	4638      	mov	r0, r7
   80976:	47b0      	blx	r6
   80978:	2800      	cmp	r0, #0
   8097a:	d1fa      	bne.n	80972 <usart_serial_getchar+0x16>
   8097c:	e019      	b.n	809b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8097e:	4b1c      	ldr	r3, [pc, #112]	; (809f0 <usart_serial_getchar+0x94>)
   80980:	4298      	cmp	r0, r3
   80982:	d109      	bne.n	80998 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80984:	461f      	mov	r7, r3
   80986:	4e1b      	ldr	r6, [pc, #108]	; (809f4 <usart_serial_getchar+0x98>)
   80988:	a901      	add	r1, sp, #4
   8098a:	4638      	mov	r0, r7
   8098c:	47b0      	blx	r6
   8098e:	2800      	cmp	r0, #0
   80990:	d1fa      	bne.n	80988 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80992:	9b01      	ldr	r3, [sp, #4]
   80994:	702b      	strb	r3, [r5, #0]
   80996:	e019      	b.n	809cc <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80998:	4b17      	ldr	r3, [pc, #92]	; (809f8 <usart_serial_getchar+0x9c>)
   8099a:	4298      	cmp	r0, r3
   8099c:	d109      	bne.n	809b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8099e:	461e      	mov	r6, r3
   809a0:	4c14      	ldr	r4, [pc, #80]	; (809f4 <usart_serial_getchar+0x98>)
   809a2:	a901      	add	r1, sp, #4
   809a4:	4630      	mov	r0, r6
   809a6:	47a0      	blx	r4
   809a8:	2800      	cmp	r0, #0
   809aa:	d1fa      	bne.n	809a2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   809ac:	9b01      	ldr	r3, [sp, #4]
   809ae:	702b      	strb	r3, [r5, #0]
   809b0:	e018      	b.n	809e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   809b2:	4b12      	ldr	r3, [pc, #72]	; (809fc <usart_serial_getchar+0xa0>)
   809b4:	429c      	cmp	r4, r3
   809b6:	d109      	bne.n	809cc <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   809b8:	461e      	mov	r6, r3
   809ba:	4c0e      	ldr	r4, [pc, #56]	; (809f4 <usart_serial_getchar+0x98>)
   809bc:	a901      	add	r1, sp, #4
   809be:	4630      	mov	r0, r6
   809c0:	47a0      	blx	r4
   809c2:	2800      	cmp	r0, #0
   809c4:	d1fa      	bne.n	809bc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   809c6:	9b01      	ldr	r3, [sp, #4]
   809c8:	702b      	strb	r3, [r5, #0]
   809ca:	e00b      	b.n	809e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809cc:	4b0c      	ldr	r3, [pc, #48]	; (80a00 <usart_serial_getchar+0xa4>)
   809ce:	429c      	cmp	r4, r3
   809d0:	d108      	bne.n	809e4 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   809d2:	461e      	mov	r6, r3
   809d4:	4c07      	ldr	r4, [pc, #28]	; (809f4 <usart_serial_getchar+0x98>)
   809d6:	a901      	add	r1, sp, #4
   809d8:	4630      	mov	r0, r6
   809da:	47a0      	blx	r4
   809dc:	2800      	cmp	r0, #0
   809de:	d1fa      	bne.n	809d6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   809e0:	9b01      	ldr	r3, [sp, #4]
   809e2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   809e4:	b003      	add	sp, #12
   809e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809e8:	400e0800 	.word	0x400e0800
   809ec:	00080225 	.word	0x00080225
   809f0:	40098000 	.word	0x40098000
   809f4:	0008024d 	.word	0x0008024d
   809f8:	4009c000 	.word	0x4009c000
   809fc:	400a0000 	.word	0x400a0000
   80a00:	400a4000 	.word	0x400a4000

00080a04 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80a04:	b570      	push	{r4, r5, r6, lr}
   80a06:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80a08:	4b1e      	ldr	r3, [pc, #120]	; (80a84 <usart_serial_putchar+0x80>)
   80a0a:	4298      	cmp	r0, r3
   80a0c:	d108      	bne.n	80a20 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80a0e:	461e      	mov	r6, r3
   80a10:	4d1d      	ldr	r5, [pc, #116]	; (80a88 <usart_serial_putchar+0x84>)
   80a12:	4621      	mov	r1, r4
   80a14:	4630      	mov	r0, r6
   80a16:	47a8      	blx	r5
   80a18:	2800      	cmp	r0, #0
   80a1a:	d1fa      	bne.n	80a12 <usart_serial_putchar+0xe>
		return 1;
   80a1c:	2001      	movs	r0, #1
   80a1e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80a20:	4b1a      	ldr	r3, [pc, #104]	; (80a8c <usart_serial_putchar+0x88>)
   80a22:	4298      	cmp	r0, r3
   80a24:	d108      	bne.n	80a38 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80a26:	461e      	mov	r6, r3
   80a28:	4d19      	ldr	r5, [pc, #100]	; (80a90 <usart_serial_putchar+0x8c>)
   80a2a:	4621      	mov	r1, r4
   80a2c:	4630      	mov	r0, r6
   80a2e:	47a8      	blx	r5
   80a30:	2800      	cmp	r0, #0
   80a32:	d1fa      	bne.n	80a2a <usart_serial_putchar+0x26>
		return 1;
   80a34:	2001      	movs	r0, #1
   80a36:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80a38:	4b16      	ldr	r3, [pc, #88]	; (80a94 <usart_serial_putchar+0x90>)
   80a3a:	4298      	cmp	r0, r3
   80a3c:	d108      	bne.n	80a50 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80a3e:	461e      	mov	r6, r3
   80a40:	4d13      	ldr	r5, [pc, #76]	; (80a90 <usart_serial_putchar+0x8c>)
   80a42:	4621      	mov	r1, r4
   80a44:	4630      	mov	r0, r6
   80a46:	47a8      	blx	r5
   80a48:	2800      	cmp	r0, #0
   80a4a:	d1fa      	bne.n	80a42 <usart_serial_putchar+0x3e>
		return 1;
   80a4c:	2001      	movs	r0, #1
   80a4e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a50:	4b11      	ldr	r3, [pc, #68]	; (80a98 <usart_serial_putchar+0x94>)
   80a52:	4298      	cmp	r0, r3
   80a54:	d108      	bne.n	80a68 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80a56:	461e      	mov	r6, r3
   80a58:	4d0d      	ldr	r5, [pc, #52]	; (80a90 <usart_serial_putchar+0x8c>)
   80a5a:	4621      	mov	r1, r4
   80a5c:	4630      	mov	r0, r6
   80a5e:	47a8      	blx	r5
   80a60:	2800      	cmp	r0, #0
   80a62:	d1fa      	bne.n	80a5a <usart_serial_putchar+0x56>
		return 1;
   80a64:	2001      	movs	r0, #1
   80a66:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a68:	4b0c      	ldr	r3, [pc, #48]	; (80a9c <usart_serial_putchar+0x98>)
   80a6a:	4298      	cmp	r0, r3
   80a6c:	d108      	bne.n	80a80 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80a6e:	461e      	mov	r6, r3
   80a70:	4d07      	ldr	r5, [pc, #28]	; (80a90 <usart_serial_putchar+0x8c>)
   80a72:	4621      	mov	r1, r4
   80a74:	4630      	mov	r0, r6
   80a76:	47a8      	blx	r5
   80a78:	2800      	cmp	r0, #0
   80a7a:	d1fa      	bne.n	80a72 <usart_serial_putchar+0x6e>
		return 1;
   80a7c:	2001      	movs	r0, #1
   80a7e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80a80:	2000      	movs	r0, #0
}
   80a82:	bd70      	pop	{r4, r5, r6, pc}
   80a84:	400e0800 	.word	0x400e0800
   80a88:	00080215 	.word	0x00080215
   80a8c:	40098000 	.word	0x40098000
   80a90:	00080239 	.word	0x00080239
   80a94:	4009c000 	.word	0x4009c000
   80a98:	400a0000 	.word	0x400a0000
   80a9c:	400a4000 	.word	0x400a4000

00080aa0 <print_long>:
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
}

//Send Integers over to terminal
void print_long(unsigned long data)
{
   80aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80aa4:	4605      	mov	r5, r0
	unsigned long div = 1000000000;		// Divider to divide data with
	char start = 0;
	char cnt = 10;
	for (int i = 1; i <= cnt; i++)
   80aa6:	2601      	movs	r6, #1

//Send Integers over to terminal
void print_long(unsigned long data)
{
	unsigned long div = 1000000000;		// Divider to divide data with
	char start = 0;
   80aa8:	2200      	movs	r2, #0
}

//Send Integers over to terminal
void print_long(unsigned long data)
{
	unsigned long div = 1000000000;		// Divider to divide data with
   80aaa:	4c21      	ldr	r4, [pc, #132]	; (80b30 <print_long+0x90>)
	{
		char send = data / div + 48; // calculate the Ascii for each number
		if(send != 48 || start == 1 || i == cnt)
		{
			//Wait until hardware is ready to send data, UDRE0 = Data register empty
			putchar(send);
   80aac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80b34 <print_long+0x94>
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
	else
		return (__swbuf_r(_ptr, _c, _p));
   80ab0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80b38 <print_long+0x98>
			start = 1;
		}
		data %= div;
		div /= 10;
   80ab4:	f8df a084 	ldr.w	sl, [pc, #132]	; 80b3c <print_long+0x9c>
	unsigned long div = 1000000000;		// Divider to divide data with
	char start = 0;
	char cnt = 10;
	for (int i = 1; i <= cnt; i++)
	{
		char send = data / div + 48; // calculate the Ascii for each number
   80ab8:	fbb5 f1f4 	udiv	r1, r5, r4
   80abc:	3130      	adds	r1, #48	; 0x30
   80abe:	b2c9      	uxtb	r1, r1
		if(send != 48 || start == 1 || i == cnt)
   80ac0:	2930      	cmp	r1, #48	; 0x30
   80ac2:	d102      	bne.n	80aca <print_long+0x2a>
   80ac4:	b90a      	cbnz	r2, 80aca <print_long+0x2a>
   80ac6:	2e0a      	cmp	r6, #10
   80ac8:	d114      	bne.n	80af4 <print_long+0x54>
		{
			//Wait until hardware is ready to send data, UDRE0 = Data register empty
			putchar(send);
   80aca:	f8d8 0000 	ldr.w	r0, [r8]
   80ace:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   80ad0:	6893      	ldr	r3, [r2, #8]
   80ad2:	3b01      	subs	r3, #1
   80ad4:	6093      	str	r3, [r2, #8]
   80ad6:	2b00      	cmp	r3, #0
   80ad8:	da04      	bge.n	80ae4 <print_long+0x44>
   80ada:	6997      	ldr	r7, [r2, #24]
   80adc:	42bb      	cmp	r3, r7
   80ade:	db07      	blt.n	80af0 <print_long+0x50>
   80ae0:	290a      	cmp	r1, #10
   80ae2:	d005      	beq.n	80af0 <print_long+0x50>
		return (*_p->_p++ = _c);
   80ae4:	6813      	ldr	r3, [r2, #0]
   80ae6:	1c58      	adds	r0, r3, #1
   80ae8:	6010      	str	r0, [r2, #0]
   80aea:	7019      	strb	r1, [r3, #0]
			start = 1;
   80aec:	2201      	movs	r2, #1
   80aee:	e001      	b.n	80af4 <print_long+0x54>
	else
		return (__swbuf_r(_ptr, _c, _p));
   80af0:	47c8      	blx	r9
   80af2:	2201      	movs	r2, #1
		}
		data %= div;
   80af4:	fbb5 f3f4 	udiv	r3, r5, r4
   80af8:	fb04 5513 	mls	r5, r4, r3, r5
		div /= 10;
   80afc:	fbaa 3404 	umull	r3, r4, sl, r4
   80b00:	08e4      	lsrs	r4, r4, #3
void print_long(unsigned long data)
{
	unsigned long div = 1000000000;		// Divider to divide data with
	char start = 0;
	char cnt = 10;
	for (int i = 1; i <= cnt; i++)
   80b02:	3601      	adds	r6, #1
   80b04:	2e0b      	cmp	r6, #11
   80b06:	d1d7      	bne.n	80ab8 <print_long+0x18>
			start = 1;
		}
		data %= div;
		div /= 10;
	}
	putchar(10);
   80b08:	4b0a      	ldr	r3, [pc, #40]	; (80b34 <print_long+0x94>)
   80b0a:	6818      	ldr	r0, [r3, #0]
   80b0c:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   80b0e:	6893      	ldr	r3, [r2, #8]
   80b10:	3b01      	subs	r3, #1
   80b12:	6093      	str	r3, [r2, #8]
   80b14:	2b00      	cmp	r3, #0
   80b16:	da04      	bge.n	80b22 <print_long+0x82>
		return (*_p->_p++ = _c);
	else
		return (__swbuf_r(_ptr, _c, _p));
   80b18:	210a      	movs	r1, #10
   80b1a:	4b07      	ldr	r3, [pc, #28]	; (80b38 <print_long+0x98>)
   80b1c:	4798      	blx	r3
   80b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
   80b22:	6813      	ldr	r3, [r2, #0]
   80b24:	1c59      	adds	r1, r3, #1
   80b26:	6011      	str	r1, [r2, #0]
   80b28:	220a      	movs	r2, #10
   80b2a:	701a      	strb	r2, [r3, #0]
   80b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80b30:	3b9aca00 	.word	0x3b9aca00
   80b34:	20070558 	.word	0x20070558
   80b38:	00080f35 	.word	0x00080f35
   80b3c:	cccccccd 	.word	0xcccccccd

00080b40 <main>:
}



int main(void)
{
   80b40:	b500      	push	{lr}
   80b42:	b085      	sub	sp, #20
	/* Initialize the SAM system. */
	sysclk_init();
   80b44:	4b22      	ldr	r3, [pc, #136]	; (80bd0 <main+0x90>)
   80b46:	4798      	blx	r3
	board_init();
   80b48:	4b22      	ldr	r3, [pc, #136]	; (80bd4 <main+0x94>)
   80b4a:	4798      	blx	r3
   80b4c:	2008      	movs	r0, #8
   80b4e:	4d22      	ldr	r5, [pc, #136]	; (80bd8 <main+0x98>)
   80b50:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b52:	4c22      	ldr	r4, [pc, #136]	; (80bdc <main+0x9c>)
   80b54:	4b22      	ldr	r3, [pc, #136]	; (80be0 <main+0xa0>)
   80b56:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b58:	4a22      	ldr	r2, [pc, #136]	; (80be4 <main+0xa4>)
   80b5a:	4b23      	ldr	r3, [pc, #140]	; (80be8 <main+0xa8>)
   80b5c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80b5e:	4a23      	ldr	r2, [pc, #140]	; (80bec <main+0xac>)
   80b60:	4b23      	ldr	r3, [pc, #140]	; (80bf0 <main+0xb0>)
   80b62:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80b64:	4b23      	ldr	r3, [pc, #140]	; (80bf4 <main+0xb4>)
   80b66:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80b68:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80b6c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b72:	9303      	str	r3, [sp, #12]
   80b74:	2008      	movs	r0, #8
   80b76:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80b78:	a901      	add	r1, sp, #4
   80b7a:	4620      	mov	r0, r4
   80b7c:	4b1e      	ldr	r3, [pc, #120]	; (80bf8 <main+0xb8>)
   80b7e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80b80:	4c1e      	ldr	r4, [pc, #120]	; (80bfc <main+0xbc>)
   80b82:	6823      	ldr	r3, [r4, #0]
   80b84:	2100      	movs	r1, #0
   80b86:	6898      	ldr	r0, [r3, #8]
   80b88:	4d1d      	ldr	r5, [pc, #116]	; (80c00 <main+0xc0>)
   80b8a:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80b8c:	6823      	ldr	r3, [r4, #0]
   80b8e:	2100      	movs	r1, #0
   80b90:	6858      	ldr	r0, [r3, #4]
   80b92:	47a8      	blx	r5

	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts("B");
   80b94:	481b      	ldr	r0, [pc, #108]	; (80c04 <main+0xc4>)
   80b96:	4b1c      	ldr	r3, [pc, #112]	; (80c08 <main+0xc8>)
   80b98:	4798      	blx	r3
	
	putchar('a');
   80b9a:	6820      	ldr	r0, [r4, #0]
   80b9c:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   80b9e:	6893      	ldr	r3, [r2, #8]
   80ba0:	3b01      	subs	r3, #1
   80ba2:	6093      	str	r3, [r2, #8]
   80ba4:	2b00      	cmp	r3, #0
   80ba6:	da02      	bge.n	80bae <main+0x6e>
   80ba8:	6991      	ldr	r1, [r2, #24]
   80baa:	428b      	cmp	r3, r1
   80bac:	db05      	blt.n	80bba <main+0x7a>
		return (*_p->_p++ = _c);
   80bae:	6813      	ldr	r3, [r2, #0]
   80bb0:	1c59      	adds	r1, r3, #1
   80bb2:	6011      	str	r1, [r2, #0]
   80bb4:	2261      	movs	r2, #97	; 0x61
   80bb6:	701a      	strb	r2, [r3, #0]
   80bb8:	e002      	b.n	80bc0 <main+0x80>
	else
		return (__swbuf_r(_ptr, _c, _p));
   80bba:	2161      	movs	r1, #97	; 0x61
   80bbc:	4b13      	ldr	r3, [pc, #76]	; (80c0c <main+0xcc>)
   80bbe:	4798      	blx	r3
	
	print_long(567);
   80bc0:	f240 2037 	movw	r0, #567	; 0x237
   80bc4:	4c12      	ldr	r4, [pc, #72]	; (80c10 <main+0xd0>)
   80bc6:	47a0      	blx	r4
	
	print_long(765);
   80bc8:	f240 20fd 	movw	r0, #765	; 0x2fd
   80bcc:	47a0      	blx	r4
   80bce:	e7fe      	b.n	80bce <main+0x8e>
   80bd0:	00080265 	.word	0x00080265
   80bd4:	000802c9 	.word	0x000802c9
   80bd8:	000806ed 	.word	0x000806ed
   80bdc:	400e0800 	.word	0x400e0800
   80be0:	20070a38 	.word	0x20070a38
   80be4:	00080a05 	.word	0x00080a05
   80be8:	20070a34 	.word	0x20070a34
   80bec:	0008095d 	.word	0x0008095d
   80bf0:	20070a30 	.word	0x20070a30
   80bf4:	0501bd00 	.word	0x0501bd00
   80bf8:	000801dd 	.word	0x000801dd
   80bfc:	20070558 	.word	0x20070558
   80c00:	00080d79 	.word	0x00080d79
   80c04:	0008286c 	.word	0x0008286c
   80c08:	00080d69 	.word	0x00080d69
   80c0c:	00080f35 	.word	0x00080f35
   80c10:	00080aa1 	.word	0x00080aa1

00080c14 <__libc_init_array>:
   80c14:	b570      	push	{r4, r5, r6, lr}
   80c16:	4e0f      	ldr	r6, [pc, #60]	; (80c54 <__libc_init_array+0x40>)
   80c18:	4d0f      	ldr	r5, [pc, #60]	; (80c58 <__libc_init_array+0x44>)
   80c1a:	1b76      	subs	r6, r6, r5
   80c1c:	10b6      	asrs	r6, r6, #2
   80c1e:	bf18      	it	ne
   80c20:	2400      	movne	r4, #0
   80c22:	d005      	beq.n	80c30 <__libc_init_array+0x1c>
   80c24:	3401      	adds	r4, #1
   80c26:	f855 3b04 	ldr.w	r3, [r5], #4
   80c2a:	4798      	blx	r3
   80c2c:	42a6      	cmp	r6, r4
   80c2e:	d1f9      	bne.n	80c24 <__libc_init_array+0x10>
   80c30:	4e0a      	ldr	r6, [pc, #40]	; (80c5c <__libc_init_array+0x48>)
   80c32:	4d0b      	ldr	r5, [pc, #44]	; (80c60 <__libc_init_array+0x4c>)
   80c34:	f001 fe22 	bl	8287c <_init>
   80c38:	1b76      	subs	r6, r6, r5
   80c3a:	10b6      	asrs	r6, r6, #2
   80c3c:	bf18      	it	ne
   80c3e:	2400      	movne	r4, #0
   80c40:	d006      	beq.n	80c50 <__libc_init_array+0x3c>
   80c42:	3401      	adds	r4, #1
   80c44:	f855 3b04 	ldr.w	r3, [r5], #4
   80c48:	4798      	blx	r3
   80c4a:	42a6      	cmp	r6, r4
   80c4c:	d1f9      	bne.n	80c42 <__libc_init_array+0x2e>
   80c4e:	bd70      	pop	{r4, r5, r6, pc}
   80c50:	bd70      	pop	{r4, r5, r6, pc}
   80c52:	bf00      	nop
   80c54:	00082888 	.word	0x00082888
   80c58:	00082888 	.word	0x00082888
   80c5c:	00082890 	.word	0x00082890
   80c60:	00082888 	.word	0x00082888

00080c64 <memset>:
   80c64:	b470      	push	{r4, r5, r6}
   80c66:	0784      	lsls	r4, r0, #30
   80c68:	d046      	beq.n	80cf8 <memset+0x94>
   80c6a:	1e54      	subs	r4, r2, #1
   80c6c:	2a00      	cmp	r2, #0
   80c6e:	d041      	beq.n	80cf4 <memset+0x90>
   80c70:	b2cd      	uxtb	r5, r1
   80c72:	4603      	mov	r3, r0
   80c74:	e002      	b.n	80c7c <memset+0x18>
   80c76:	1e62      	subs	r2, r4, #1
   80c78:	b3e4      	cbz	r4, 80cf4 <memset+0x90>
   80c7a:	4614      	mov	r4, r2
   80c7c:	f803 5b01 	strb.w	r5, [r3], #1
   80c80:	079a      	lsls	r2, r3, #30
   80c82:	d1f8      	bne.n	80c76 <memset+0x12>
   80c84:	2c03      	cmp	r4, #3
   80c86:	d92e      	bls.n	80ce6 <memset+0x82>
   80c88:	b2cd      	uxtb	r5, r1
   80c8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80c8e:	2c0f      	cmp	r4, #15
   80c90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80c94:	d919      	bls.n	80cca <memset+0x66>
   80c96:	4626      	mov	r6, r4
   80c98:	f103 0210 	add.w	r2, r3, #16
   80c9c:	3e10      	subs	r6, #16
   80c9e:	2e0f      	cmp	r6, #15
   80ca0:	f842 5c10 	str.w	r5, [r2, #-16]
   80ca4:	f842 5c0c 	str.w	r5, [r2, #-12]
   80ca8:	f842 5c08 	str.w	r5, [r2, #-8]
   80cac:	f842 5c04 	str.w	r5, [r2, #-4]
   80cb0:	f102 0210 	add.w	r2, r2, #16
   80cb4:	d8f2      	bhi.n	80c9c <memset+0x38>
   80cb6:	f1a4 0210 	sub.w	r2, r4, #16
   80cba:	f022 020f 	bic.w	r2, r2, #15
   80cbe:	f004 040f 	and.w	r4, r4, #15
   80cc2:	3210      	adds	r2, #16
   80cc4:	2c03      	cmp	r4, #3
   80cc6:	4413      	add	r3, r2
   80cc8:	d90d      	bls.n	80ce6 <memset+0x82>
   80cca:	461e      	mov	r6, r3
   80ccc:	4622      	mov	r2, r4
   80cce:	3a04      	subs	r2, #4
   80cd0:	2a03      	cmp	r2, #3
   80cd2:	f846 5b04 	str.w	r5, [r6], #4
   80cd6:	d8fa      	bhi.n	80cce <memset+0x6a>
   80cd8:	1f22      	subs	r2, r4, #4
   80cda:	f022 0203 	bic.w	r2, r2, #3
   80cde:	3204      	adds	r2, #4
   80ce0:	4413      	add	r3, r2
   80ce2:	f004 0403 	and.w	r4, r4, #3
   80ce6:	b12c      	cbz	r4, 80cf4 <memset+0x90>
   80ce8:	b2c9      	uxtb	r1, r1
   80cea:	441c      	add	r4, r3
   80cec:	f803 1b01 	strb.w	r1, [r3], #1
   80cf0:	42a3      	cmp	r3, r4
   80cf2:	d1fb      	bne.n	80cec <memset+0x88>
   80cf4:	bc70      	pop	{r4, r5, r6}
   80cf6:	4770      	bx	lr
   80cf8:	4614      	mov	r4, r2
   80cfa:	4603      	mov	r3, r0
   80cfc:	e7c2      	b.n	80c84 <memset+0x20>
   80cfe:	bf00      	nop

00080d00 <_puts_r>:
   80d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d02:	4605      	mov	r5, r0
   80d04:	b089      	sub	sp, #36	; 0x24
   80d06:	4608      	mov	r0, r1
   80d08:	460c      	mov	r4, r1
   80d0a:	f000 f8e5 	bl	80ed8 <strlen>
   80d0e:	1c43      	adds	r3, r0, #1
   80d10:	4f14      	ldr	r7, [pc, #80]	; (80d64 <_puts_r+0x64>)
   80d12:	9303      	str	r3, [sp, #12]
   80d14:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80d16:	2601      	movs	r6, #1
   80d18:	a904      	add	r1, sp, #16
   80d1a:	2202      	movs	r2, #2
   80d1c:	9404      	str	r4, [sp, #16]
   80d1e:	9005      	str	r0, [sp, #20]
   80d20:	68ac      	ldr	r4, [r5, #8]
   80d22:	9706      	str	r7, [sp, #24]
   80d24:	9607      	str	r6, [sp, #28]
   80d26:	9101      	str	r1, [sp, #4]
   80d28:	9202      	str	r2, [sp, #8]
   80d2a:	b1b3      	cbz	r3, 80d5a <_puts_r+0x5a>
   80d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80d30:	049a      	lsls	r2, r3, #18
   80d32:	d406      	bmi.n	80d42 <_puts_r+0x42>
   80d34:	6e62      	ldr	r2, [r4, #100]	; 0x64
   80d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   80d3e:	81a3      	strh	r3, [r4, #12]
   80d40:	6662      	str	r2, [r4, #100]	; 0x64
   80d42:	4621      	mov	r1, r4
   80d44:	4628      	mov	r0, r5
   80d46:	aa01      	add	r2, sp, #4
   80d48:	f000 fc4a 	bl	815e0 <__sfvwrite_r>
   80d4c:	2800      	cmp	r0, #0
   80d4e:	bf14      	ite	ne
   80d50:	f04f 30ff 	movne.w	r0, #4294967295
   80d54:	200a      	moveq	r0, #10
   80d56:	b009      	add	sp, #36	; 0x24
   80d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d5a:	4628      	mov	r0, r5
   80d5c:	f000 faec 	bl	81338 <__sinit>
   80d60:	e7e4      	b.n	80d2c <_puts_r+0x2c>
   80d62:	bf00      	nop
   80d64:	00082878 	.word	0x00082878

00080d68 <puts>:
   80d68:	4b02      	ldr	r3, [pc, #8]	; (80d74 <puts+0xc>)
   80d6a:	4601      	mov	r1, r0
   80d6c:	6818      	ldr	r0, [r3, #0]
   80d6e:	f7ff bfc7 	b.w	80d00 <_puts_r>
   80d72:	bf00      	nop
   80d74:	20070558 	.word	0x20070558

00080d78 <setbuf>:
   80d78:	2900      	cmp	r1, #0
   80d7a:	bf0c      	ite	eq
   80d7c:	2202      	moveq	r2, #2
   80d7e:	2200      	movne	r2, #0
   80d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80d84:	f000 b800 	b.w	80d88 <setvbuf>

00080d88 <setvbuf>:
   80d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80d8c:	4d51      	ldr	r5, [pc, #324]	; (80ed4 <setvbuf+0x14c>)
   80d8e:	b083      	sub	sp, #12
   80d90:	682d      	ldr	r5, [r5, #0]
   80d92:	4604      	mov	r4, r0
   80d94:	460f      	mov	r7, r1
   80d96:	4690      	mov	r8, r2
   80d98:	461e      	mov	r6, r3
   80d9a:	b115      	cbz	r5, 80da2 <setvbuf+0x1a>
   80d9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80d9e:	2b00      	cmp	r3, #0
   80da0:	d079      	beq.n	80e96 <setvbuf+0x10e>
   80da2:	f1b8 0f02 	cmp.w	r8, #2
   80da6:	d004      	beq.n	80db2 <setvbuf+0x2a>
   80da8:	f1b8 0f01 	cmp.w	r8, #1
   80dac:	d87f      	bhi.n	80eae <setvbuf+0x126>
   80dae:	2e00      	cmp	r6, #0
   80db0:	db7d      	blt.n	80eae <setvbuf+0x126>
   80db2:	4621      	mov	r1, r4
   80db4:	4628      	mov	r0, r5
   80db6:	f000 fa2b 	bl	81210 <_fflush_r>
   80dba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80dbc:	b141      	cbz	r1, 80dd0 <setvbuf+0x48>
   80dbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80dc2:	4299      	cmp	r1, r3
   80dc4:	d002      	beq.n	80dcc <setvbuf+0x44>
   80dc6:	4628      	mov	r0, r5
   80dc8:	f000 fb22 	bl	81410 <_free_r>
   80dcc:	2300      	movs	r3, #0
   80dce:	6323      	str	r3, [r4, #48]	; 0x30
   80dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80dd4:	2200      	movs	r2, #0
   80dd6:	61a2      	str	r2, [r4, #24]
   80dd8:	6062      	str	r2, [r4, #4]
   80dda:	061a      	lsls	r2, r3, #24
   80ddc:	d454      	bmi.n	80e88 <setvbuf+0x100>
   80dde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   80de2:	f023 0303 	bic.w	r3, r3, #3
   80de6:	f1b8 0f02 	cmp.w	r8, #2
   80dea:	81a3      	strh	r3, [r4, #12]
   80dec:	d039      	beq.n	80e62 <setvbuf+0xda>
   80dee:	ab01      	add	r3, sp, #4
   80df0:	466a      	mov	r2, sp
   80df2:	4621      	mov	r1, r4
   80df4:	4628      	mov	r0, r5
   80df6:	f000 fd9f 	bl	81938 <__swhatbuf_r>
   80dfa:	89a3      	ldrh	r3, [r4, #12]
   80dfc:	4318      	orrs	r0, r3
   80dfe:	81a0      	strh	r0, [r4, #12]
   80e00:	b326      	cbz	r6, 80e4c <setvbuf+0xc4>
   80e02:	b327      	cbz	r7, 80e4e <setvbuf+0xc6>
   80e04:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80e06:	2b00      	cmp	r3, #0
   80e08:	d04d      	beq.n	80ea6 <setvbuf+0x11e>
   80e0a:	9b00      	ldr	r3, [sp, #0]
   80e0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   80e10:	429e      	cmp	r6, r3
   80e12:	bf1c      	itt	ne
   80e14:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   80e18:	81a0      	strhne	r0, [r4, #12]
   80e1a:	f1b8 0f01 	cmp.w	r8, #1
   80e1e:	bf08      	it	eq
   80e20:	f040 0001 	orreq.w	r0, r0, #1
   80e24:	b283      	uxth	r3, r0
   80e26:	bf08      	it	eq
   80e28:	81a0      	strheq	r0, [r4, #12]
   80e2a:	f003 0008 	and.w	r0, r3, #8
   80e2e:	b280      	uxth	r0, r0
   80e30:	6027      	str	r7, [r4, #0]
   80e32:	6127      	str	r7, [r4, #16]
   80e34:	6166      	str	r6, [r4, #20]
   80e36:	b318      	cbz	r0, 80e80 <setvbuf+0xf8>
   80e38:	f013 0001 	ands.w	r0, r3, #1
   80e3c:	d02f      	beq.n	80e9e <setvbuf+0x116>
   80e3e:	2000      	movs	r0, #0
   80e40:	4276      	negs	r6, r6
   80e42:	61a6      	str	r6, [r4, #24]
   80e44:	60a0      	str	r0, [r4, #8]
   80e46:	b003      	add	sp, #12
   80e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e4c:	9e00      	ldr	r6, [sp, #0]
   80e4e:	4630      	mov	r0, r6
   80e50:	f000 fde6 	bl	81a20 <malloc>
   80e54:	4607      	mov	r7, r0
   80e56:	b368      	cbz	r0, 80eb4 <setvbuf+0x12c>
   80e58:	89a3      	ldrh	r3, [r4, #12]
   80e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80e5e:	81a3      	strh	r3, [r4, #12]
   80e60:	e7d0      	b.n	80e04 <setvbuf+0x7c>
   80e62:	2000      	movs	r0, #0
   80e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80e68:	f043 0302 	orr.w	r3, r3, #2
   80e6c:	2500      	movs	r5, #0
   80e6e:	2101      	movs	r1, #1
   80e70:	81a3      	strh	r3, [r4, #12]
   80e72:	60a5      	str	r5, [r4, #8]
   80e74:	6022      	str	r2, [r4, #0]
   80e76:	6122      	str	r2, [r4, #16]
   80e78:	6161      	str	r1, [r4, #20]
   80e7a:	b003      	add	sp, #12
   80e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e80:	60a0      	str	r0, [r4, #8]
   80e82:	b003      	add	sp, #12
   80e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e88:	6921      	ldr	r1, [r4, #16]
   80e8a:	4628      	mov	r0, r5
   80e8c:	f000 fac0 	bl	81410 <_free_r>
   80e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80e94:	e7a3      	b.n	80dde <setvbuf+0x56>
   80e96:	4628      	mov	r0, r5
   80e98:	f000 fa4e 	bl	81338 <__sinit>
   80e9c:	e781      	b.n	80da2 <setvbuf+0x1a>
   80e9e:	60a6      	str	r6, [r4, #8]
   80ea0:	b003      	add	sp, #12
   80ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80ea6:	4628      	mov	r0, r5
   80ea8:	f000 fa46 	bl	81338 <__sinit>
   80eac:	e7ad      	b.n	80e0a <setvbuf+0x82>
   80eae:	f04f 30ff 	mov.w	r0, #4294967295
   80eb2:	e7e2      	b.n	80e7a <setvbuf+0xf2>
   80eb4:	f8dd 9000 	ldr.w	r9, [sp]
   80eb8:	45b1      	cmp	r9, r6
   80eba:	d006      	beq.n	80eca <setvbuf+0x142>
   80ebc:	4648      	mov	r0, r9
   80ebe:	f000 fdaf 	bl	81a20 <malloc>
   80ec2:	4607      	mov	r7, r0
   80ec4:	b108      	cbz	r0, 80eca <setvbuf+0x142>
   80ec6:	464e      	mov	r6, r9
   80ec8:	e7c6      	b.n	80e58 <setvbuf+0xd0>
   80eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80ece:	f04f 30ff 	mov.w	r0, #4294967295
   80ed2:	e7c7      	b.n	80e64 <setvbuf+0xdc>
   80ed4:	20070558 	.word	0x20070558

00080ed8 <strlen>:
   80ed8:	f020 0103 	bic.w	r1, r0, #3
   80edc:	f010 0003 	ands.w	r0, r0, #3
   80ee0:	f1c0 0000 	rsb	r0, r0, #0
   80ee4:	f851 3b04 	ldr.w	r3, [r1], #4
   80ee8:	f100 0c04 	add.w	ip, r0, #4
   80eec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   80ef0:	f06f 0200 	mvn.w	r2, #0
   80ef4:	bf1c      	itt	ne
   80ef6:	fa22 f20c 	lsrne.w	r2, r2, ip
   80efa:	4313      	orrne	r3, r2
   80efc:	f04f 0c01 	mov.w	ip, #1
   80f00:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   80f04:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   80f08:	eba3 020c 	sub.w	r2, r3, ip
   80f0c:	ea22 0203 	bic.w	r2, r2, r3
   80f10:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   80f14:	bf04      	itt	eq
   80f16:	f851 3b04 	ldreq.w	r3, [r1], #4
   80f1a:	3004      	addeq	r0, #4
   80f1c:	d0f4      	beq.n	80f08 <strlen+0x30>
   80f1e:	f1c2 0100 	rsb	r1, r2, #0
   80f22:	ea02 0201 	and.w	r2, r2, r1
   80f26:	fab2 f282 	clz	r2, r2
   80f2a:	f1c2 021f 	rsb	r2, r2, #31
   80f2e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   80f32:	4770      	bx	lr

00080f34 <__swbuf_r>:
   80f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f36:	460e      	mov	r6, r1
   80f38:	4614      	mov	r4, r2
   80f3a:	4607      	mov	r7, r0
   80f3c:	b110      	cbz	r0, 80f44 <__swbuf_r+0x10>
   80f3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80f40:	2b00      	cmp	r3, #0
   80f42:	d04a      	beq.n	80fda <__swbuf_r+0xa6>
   80f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80f48:	69a3      	ldr	r3, [r4, #24]
   80f4a:	b291      	uxth	r1, r2
   80f4c:	0708      	lsls	r0, r1, #28
   80f4e:	60a3      	str	r3, [r4, #8]
   80f50:	d538      	bpl.n	80fc4 <__swbuf_r+0x90>
   80f52:	6923      	ldr	r3, [r4, #16]
   80f54:	2b00      	cmp	r3, #0
   80f56:	d035      	beq.n	80fc4 <__swbuf_r+0x90>
   80f58:	0489      	lsls	r1, r1, #18
   80f5a:	b2f5      	uxtb	r5, r6
   80f5c:	d515      	bpl.n	80f8a <__swbuf_r+0x56>
   80f5e:	6822      	ldr	r2, [r4, #0]
   80f60:	6961      	ldr	r1, [r4, #20]
   80f62:	1ad3      	subs	r3, r2, r3
   80f64:	428b      	cmp	r3, r1
   80f66:	da1c      	bge.n	80fa2 <__swbuf_r+0x6e>
   80f68:	3301      	adds	r3, #1
   80f6a:	68a1      	ldr	r1, [r4, #8]
   80f6c:	1c50      	adds	r0, r2, #1
   80f6e:	3901      	subs	r1, #1
   80f70:	60a1      	str	r1, [r4, #8]
   80f72:	6020      	str	r0, [r4, #0]
   80f74:	7016      	strb	r6, [r2, #0]
   80f76:	6962      	ldr	r2, [r4, #20]
   80f78:	429a      	cmp	r2, r3
   80f7a:	d01a      	beq.n	80fb2 <__swbuf_r+0x7e>
   80f7c:	89a3      	ldrh	r3, [r4, #12]
   80f7e:	07db      	lsls	r3, r3, #31
   80f80:	d501      	bpl.n	80f86 <__swbuf_r+0x52>
   80f82:	2d0a      	cmp	r5, #10
   80f84:	d015      	beq.n	80fb2 <__swbuf_r+0x7e>
   80f86:	4628      	mov	r0, r5
   80f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80f8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   80f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80f90:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   80f94:	81a2      	strh	r2, [r4, #12]
   80f96:	6822      	ldr	r2, [r4, #0]
   80f98:	6661      	str	r1, [r4, #100]	; 0x64
   80f9a:	6961      	ldr	r1, [r4, #20]
   80f9c:	1ad3      	subs	r3, r2, r3
   80f9e:	428b      	cmp	r3, r1
   80fa0:	dbe2      	blt.n	80f68 <__swbuf_r+0x34>
   80fa2:	4621      	mov	r1, r4
   80fa4:	4638      	mov	r0, r7
   80fa6:	f000 f933 	bl	81210 <_fflush_r>
   80faa:	b940      	cbnz	r0, 80fbe <__swbuf_r+0x8a>
   80fac:	6822      	ldr	r2, [r4, #0]
   80fae:	2301      	movs	r3, #1
   80fb0:	e7db      	b.n	80f6a <__swbuf_r+0x36>
   80fb2:	4621      	mov	r1, r4
   80fb4:	4638      	mov	r0, r7
   80fb6:	f000 f92b 	bl	81210 <_fflush_r>
   80fba:	2800      	cmp	r0, #0
   80fbc:	d0e3      	beq.n	80f86 <__swbuf_r+0x52>
   80fbe:	f04f 30ff 	mov.w	r0, #4294967295
   80fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80fc4:	4621      	mov	r1, r4
   80fc6:	4638      	mov	r0, r7
   80fc8:	f000 f80a 	bl	80fe0 <__swsetup_r>
   80fcc:	2800      	cmp	r0, #0
   80fce:	d1f6      	bne.n	80fbe <__swbuf_r+0x8a>
   80fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80fd4:	6923      	ldr	r3, [r4, #16]
   80fd6:	b291      	uxth	r1, r2
   80fd8:	e7be      	b.n	80f58 <__swbuf_r+0x24>
   80fda:	f000 f9ad 	bl	81338 <__sinit>
   80fde:	e7b1      	b.n	80f44 <__swbuf_r+0x10>

00080fe0 <__swsetup_r>:
   80fe0:	b538      	push	{r3, r4, r5, lr}
   80fe2:	4b30      	ldr	r3, [pc, #192]	; (810a4 <__swsetup_r+0xc4>)
   80fe4:	4605      	mov	r5, r0
   80fe6:	6818      	ldr	r0, [r3, #0]
   80fe8:	460c      	mov	r4, r1
   80fea:	b110      	cbz	r0, 80ff2 <__swsetup_r+0x12>
   80fec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80fee:	2b00      	cmp	r3, #0
   80ff0:	d038      	beq.n	81064 <__swsetup_r+0x84>
   80ff2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80ff6:	b293      	uxth	r3, r2
   80ff8:	0718      	lsls	r0, r3, #28
   80ffa:	d50c      	bpl.n	81016 <__swsetup_r+0x36>
   80ffc:	6920      	ldr	r0, [r4, #16]
   80ffe:	b1a8      	cbz	r0, 8102c <__swsetup_r+0x4c>
   81000:	f013 0201 	ands.w	r2, r3, #1
   81004:	d01e      	beq.n	81044 <__swsetup_r+0x64>
   81006:	6963      	ldr	r3, [r4, #20]
   81008:	2200      	movs	r2, #0
   8100a:	425b      	negs	r3, r3
   8100c:	61a3      	str	r3, [r4, #24]
   8100e:	60a2      	str	r2, [r4, #8]
   81010:	b1f0      	cbz	r0, 81050 <__swsetup_r+0x70>
   81012:	2000      	movs	r0, #0
   81014:	bd38      	pop	{r3, r4, r5, pc}
   81016:	06d9      	lsls	r1, r3, #27
   81018:	d53b      	bpl.n	81092 <__swsetup_r+0xb2>
   8101a:	0758      	lsls	r0, r3, #29
   8101c:	d425      	bmi.n	8106a <__swsetup_r+0x8a>
   8101e:	6920      	ldr	r0, [r4, #16]
   81020:	f042 0308 	orr.w	r3, r2, #8
   81024:	81a3      	strh	r3, [r4, #12]
   81026:	b29b      	uxth	r3, r3
   81028:	2800      	cmp	r0, #0
   8102a:	d1e9      	bne.n	81000 <__swsetup_r+0x20>
   8102c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81030:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81034:	d0e4      	beq.n	81000 <__swsetup_r+0x20>
   81036:	4628      	mov	r0, r5
   81038:	4621      	mov	r1, r4
   8103a:	f000 fcad 	bl	81998 <__smakebuf_r>
   8103e:	89a3      	ldrh	r3, [r4, #12]
   81040:	6920      	ldr	r0, [r4, #16]
   81042:	e7dd      	b.n	81000 <__swsetup_r+0x20>
   81044:	0799      	lsls	r1, r3, #30
   81046:	bf58      	it	pl
   81048:	6962      	ldrpl	r2, [r4, #20]
   8104a:	60a2      	str	r2, [r4, #8]
   8104c:	2800      	cmp	r0, #0
   8104e:	d1e0      	bne.n	81012 <__swsetup_r+0x32>
   81050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81054:	061a      	lsls	r2, r3, #24
   81056:	d5dd      	bpl.n	81014 <__swsetup_r+0x34>
   81058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8105c:	81a3      	strh	r3, [r4, #12]
   8105e:	f04f 30ff 	mov.w	r0, #4294967295
   81062:	bd38      	pop	{r3, r4, r5, pc}
   81064:	f000 f968 	bl	81338 <__sinit>
   81068:	e7c3      	b.n	80ff2 <__swsetup_r+0x12>
   8106a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8106c:	b151      	cbz	r1, 81084 <__swsetup_r+0xa4>
   8106e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81072:	4299      	cmp	r1, r3
   81074:	d004      	beq.n	81080 <__swsetup_r+0xa0>
   81076:	4628      	mov	r0, r5
   81078:	f000 f9ca 	bl	81410 <_free_r>
   8107c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81080:	2300      	movs	r3, #0
   81082:	6323      	str	r3, [r4, #48]	; 0x30
   81084:	6920      	ldr	r0, [r4, #16]
   81086:	2300      	movs	r3, #0
   81088:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8108c:	e884 0009 	stmia.w	r4, {r0, r3}
   81090:	e7c6      	b.n	81020 <__swsetup_r+0x40>
   81092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81096:	2309      	movs	r3, #9
   81098:	602b      	str	r3, [r5, #0]
   8109a:	f04f 30ff 	mov.w	r0, #4294967295
   8109e:	81a2      	strh	r2, [r4, #12]
   810a0:	bd38      	pop	{r3, r4, r5, pc}
   810a2:	bf00      	nop
   810a4:	20070558 	.word	0x20070558

000810a8 <register_fini>:
   810a8:	4b02      	ldr	r3, [pc, #8]	; (810b4 <register_fini+0xc>)
   810aa:	b113      	cbz	r3, 810b2 <register_fini+0xa>
   810ac:	4802      	ldr	r0, [pc, #8]	; (810b8 <register_fini+0x10>)
   810ae:	f000 b805 	b.w	810bc <atexit>
   810b2:	4770      	bx	lr
   810b4:	00000000 	.word	0x00000000
   810b8:	0008134d 	.word	0x0008134d

000810bc <atexit>:
   810bc:	2300      	movs	r3, #0
   810be:	4601      	mov	r1, r0
   810c0:	461a      	mov	r2, r3
   810c2:	4618      	mov	r0, r3
   810c4:	f001 bada 	b.w	8267c <__register_exitproc>

000810c8 <__sflush_r>:
   810c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   810cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810d0:	b29a      	uxth	r2, r3
   810d2:	460d      	mov	r5, r1
   810d4:	0711      	lsls	r1, r2, #28
   810d6:	4680      	mov	r8, r0
   810d8:	d43c      	bmi.n	81154 <__sflush_r+0x8c>
   810da:	686a      	ldr	r2, [r5, #4]
   810dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   810e0:	2a00      	cmp	r2, #0
   810e2:	81ab      	strh	r3, [r5, #12]
   810e4:	dd73      	ble.n	811ce <__sflush_r+0x106>
   810e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   810e8:	2c00      	cmp	r4, #0
   810ea:	d04b      	beq.n	81184 <__sflush_r+0xbc>
   810ec:	b29b      	uxth	r3, r3
   810ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   810f2:	2100      	movs	r1, #0
   810f4:	b292      	uxth	r2, r2
   810f6:	f8d8 6000 	ldr.w	r6, [r8]
   810fa:	f8c8 1000 	str.w	r1, [r8]
   810fe:	2a00      	cmp	r2, #0
   81100:	d069      	beq.n	811d6 <__sflush_r+0x10e>
   81102:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81104:	075f      	lsls	r7, r3, #29
   81106:	d505      	bpl.n	81114 <__sflush_r+0x4c>
   81108:	6869      	ldr	r1, [r5, #4]
   8110a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8110c:	1a52      	subs	r2, r2, r1
   8110e:	b10b      	cbz	r3, 81114 <__sflush_r+0x4c>
   81110:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81112:	1ad2      	subs	r2, r2, r3
   81114:	2300      	movs	r3, #0
   81116:	69e9      	ldr	r1, [r5, #28]
   81118:	4640      	mov	r0, r8
   8111a:	47a0      	blx	r4
   8111c:	1c44      	adds	r4, r0, #1
   8111e:	d03c      	beq.n	8119a <__sflush_r+0xd2>
   81120:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   81124:	6929      	ldr	r1, [r5, #16]
   81126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8112a:	2200      	movs	r2, #0
   8112c:	81ab      	strh	r3, [r5, #12]
   8112e:	04db      	lsls	r3, r3, #19
   81130:	e885 0006 	stmia.w	r5, {r1, r2}
   81134:	d449      	bmi.n	811ca <__sflush_r+0x102>
   81136:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81138:	f8c8 6000 	str.w	r6, [r8]
   8113c:	b311      	cbz	r1, 81184 <__sflush_r+0xbc>
   8113e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81142:	4299      	cmp	r1, r3
   81144:	d002      	beq.n	8114c <__sflush_r+0x84>
   81146:	4640      	mov	r0, r8
   81148:	f000 f962 	bl	81410 <_free_r>
   8114c:	2000      	movs	r0, #0
   8114e:	6328      	str	r0, [r5, #48]	; 0x30
   81150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81154:	692e      	ldr	r6, [r5, #16]
   81156:	b1ae      	cbz	r6, 81184 <__sflush_r+0xbc>
   81158:	0790      	lsls	r0, r2, #30
   8115a:	682c      	ldr	r4, [r5, #0]
   8115c:	bf0c      	ite	eq
   8115e:	696b      	ldreq	r3, [r5, #20]
   81160:	2300      	movne	r3, #0
   81162:	602e      	str	r6, [r5, #0]
   81164:	1ba4      	subs	r4, r4, r6
   81166:	60ab      	str	r3, [r5, #8]
   81168:	e00a      	b.n	81180 <__sflush_r+0xb8>
   8116a:	4623      	mov	r3, r4
   8116c:	4632      	mov	r2, r6
   8116e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81170:	69e9      	ldr	r1, [r5, #28]
   81172:	4640      	mov	r0, r8
   81174:	47b8      	blx	r7
   81176:	2800      	cmp	r0, #0
   81178:	eba4 0400 	sub.w	r4, r4, r0
   8117c:	4406      	add	r6, r0
   8117e:	dd04      	ble.n	8118a <__sflush_r+0xc2>
   81180:	2c00      	cmp	r4, #0
   81182:	dcf2      	bgt.n	8116a <__sflush_r+0xa2>
   81184:	2000      	movs	r0, #0
   81186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8118a:	89ab      	ldrh	r3, [r5, #12]
   8118c:	f04f 30ff 	mov.w	r0, #4294967295
   81190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81194:	81ab      	strh	r3, [r5, #12]
   81196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8119a:	f8d8 2000 	ldr.w	r2, [r8]
   8119e:	2a1d      	cmp	r2, #29
   811a0:	d8f3      	bhi.n	8118a <__sflush_r+0xc2>
   811a2:	4b1a      	ldr	r3, [pc, #104]	; (8120c <__sflush_r+0x144>)
   811a4:	40d3      	lsrs	r3, r2
   811a6:	f003 0301 	and.w	r3, r3, #1
   811aa:	f083 0401 	eor.w	r4, r3, #1
   811ae:	2b00      	cmp	r3, #0
   811b0:	d0eb      	beq.n	8118a <__sflush_r+0xc2>
   811b2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   811b6:	6929      	ldr	r1, [r5, #16]
   811b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   811bc:	6029      	str	r1, [r5, #0]
   811be:	04d9      	lsls	r1, r3, #19
   811c0:	606c      	str	r4, [r5, #4]
   811c2:	81ab      	strh	r3, [r5, #12]
   811c4:	d5b7      	bpl.n	81136 <__sflush_r+0x6e>
   811c6:	2a00      	cmp	r2, #0
   811c8:	d1b5      	bne.n	81136 <__sflush_r+0x6e>
   811ca:	6528      	str	r0, [r5, #80]	; 0x50
   811cc:	e7b3      	b.n	81136 <__sflush_r+0x6e>
   811ce:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   811d0:	2a00      	cmp	r2, #0
   811d2:	dc88      	bgt.n	810e6 <__sflush_r+0x1e>
   811d4:	e7d6      	b.n	81184 <__sflush_r+0xbc>
   811d6:	2301      	movs	r3, #1
   811d8:	69e9      	ldr	r1, [r5, #28]
   811da:	4640      	mov	r0, r8
   811dc:	47a0      	blx	r4
   811de:	1c43      	adds	r3, r0, #1
   811e0:	4602      	mov	r2, r0
   811e2:	d002      	beq.n	811ea <__sflush_r+0x122>
   811e4:	89ab      	ldrh	r3, [r5, #12]
   811e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   811e8:	e78c      	b.n	81104 <__sflush_r+0x3c>
   811ea:	f8d8 3000 	ldr.w	r3, [r8]
   811ee:	2b00      	cmp	r3, #0
   811f0:	d0f8      	beq.n	811e4 <__sflush_r+0x11c>
   811f2:	2b1d      	cmp	r3, #29
   811f4:	d001      	beq.n	811fa <__sflush_r+0x132>
   811f6:	2b16      	cmp	r3, #22
   811f8:	d102      	bne.n	81200 <__sflush_r+0x138>
   811fa:	f8c8 6000 	str.w	r6, [r8]
   811fe:	e7c1      	b.n	81184 <__sflush_r+0xbc>
   81200:	89ab      	ldrh	r3, [r5, #12]
   81202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81206:	81ab      	strh	r3, [r5, #12]
   81208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8120c:	20400001 	.word	0x20400001

00081210 <_fflush_r>:
   81210:	b510      	push	{r4, lr}
   81212:	4604      	mov	r4, r0
   81214:	b082      	sub	sp, #8
   81216:	b108      	cbz	r0, 8121c <_fflush_r+0xc>
   81218:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8121a:	b153      	cbz	r3, 81232 <_fflush_r+0x22>
   8121c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81220:	b908      	cbnz	r0, 81226 <_fflush_r+0x16>
   81222:	b002      	add	sp, #8
   81224:	bd10      	pop	{r4, pc}
   81226:	4620      	mov	r0, r4
   81228:	b002      	add	sp, #8
   8122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8122e:	f7ff bf4b 	b.w	810c8 <__sflush_r>
   81232:	9101      	str	r1, [sp, #4]
   81234:	f000 f880 	bl	81338 <__sinit>
   81238:	9901      	ldr	r1, [sp, #4]
   8123a:	e7ef      	b.n	8121c <_fflush_r+0xc>

0008123c <_cleanup_r>:
   8123c:	4901      	ldr	r1, [pc, #4]	; (81244 <_cleanup_r+0x8>)
   8123e:	f000 bb53 	b.w	818e8 <_fwalk_reent>
   81242:	bf00      	nop
   81244:	00082745 	.word	0x00082745

00081248 <__sinit.part.1>:
   81248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8124c:	4607      	mov	r7, r0
   8124e:	4835      	ldr	r0, [pc, #212]	; (81324 <__sinit.part.1+0xdc>)
   81250:	687d      	ldr	r5, [r7, #4]
   81252:	2400      	movs	r4, #0
   81254:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81258:	2304      	movs	r3, #4
   8125a:	2103      	movs	r1, #3
   8125c:	63f8      	str	r0, [r7, #60]	; 0x3c
   8125e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81262:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81266:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8126a:	b083      	sub	sp, #12
   8126c:	602c      	str	r4, [r5, #0]
   8126e:	606c      	str	r4, [r5, #4]
   81270:	60ac      	str	r4, [r5, #8]
   81272:	666c      	str	r4, [r5, #100]	; 0x64
   81274:	81ec      	strh	r4, [r5, #14]
   81276:	612c      	str	r4, [r5, #16]
   81278:	616c      	str	r4, [r5, #20]
   8127a:	61ac      	str	r4, [r5, #24]
   8127c:	81ab      	strh	r3, [r5, #12]
   8127e:	4621      	mov	r1, r4
   81280:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81284:	2208      	movs	r2, #8
   81286:	f7ff fced 	bl	80c64 <memset>
   8128a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81328 <__sinit.part.1+0xe0>
   8128e:	68be      	ldr	r6, [r7, #8]
   81290:	f8df a098 	ldr.w	sl, [pc, #152]	; 8132c <__sinit.part.1+0xe4>
   81294:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81330 <__sinit.part.1+0xe8>
   81298:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81334 <__sinit.part.1+0xec>
   8129c:	2301      	movs	r3, #1
   8129e:	2209      	movs	r2, #9
   812a0:	f8c5 b020 	str.w	fp, [r5, #32]
   812a4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   812a8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   812ac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   812b0:	61ed      	str	r5, [r5, #28]
   812b2:	4621      	mov	r1, r4
   812b4:	81f3      	strh	r3, [r6, #14]
   812b6:	81b2      	strh	r2, [r6, #12]
   812b8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   812bc:	6034      	str	r4, [r6, #0]
   812be:	6074      	str	r4, [r6, #4]
   812c0:	60b4      	str	r4, [r6, #8]
   812c2:	6674      	str	r4, [r6, #100]	; 0x64
   812c4:	6134      	str	r4, [r6, #16]
   812c6:	6174      	str	r4, [r6, #20]
   812c8:	61b4      	str	r4, [r6, #24]
   812ca:	2208      	movs	r2, #8
   812cc:	9301      	str	r3, [sp, #4]
   812ce:	f7ff fcc9 	bl	80c64 <memset>
   812d2:	68fd      	ldr	r5, [r7, #12]
   812d4:	2012      	movs	r0, #18
   812d6:	2202      	movs	r2, #2
   812d8:	61f6      	str	r6, [r6, #28]
   812da:	f8c6 b020 	str.w	fp, [r6, #32]
   812de:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   812e2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   812e6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   812ea:	4621      	mov	r1, r4
   812ec:	81a8      	strh	r0, [r5, #12]
   812ee:	81ea      	strh	r2, [r5, #14]
   812f0:	602c      	str	r4, [r5, #0]
   812f2:	606c      	str	r4, [r5, #4]
   812f4:	60ac      	str	r4, [r5, #8]
   812f6:	666c      	str	r4, [r5, #100]	; 0x64
   812f8:	612c      	str	r4, [r5, #16]
   812fa:	616c      	str	r4, [r5, #20]
   812fc:	61ac      	str	r4, [r5, #24]
   812fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81302:	2208      	movs	r2, #8
   81304:	f7ff fcae 	bl	80c64 <memset>
   81308:	9b01      	ldr	r3, [sp, #4]
   8130a:	61ed      	str	r5, [r5, #28]
   8130c:	f8c5 b020 	str.w	fp, [r5, #32]
   81310:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81314:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81318:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8131c:	63bb      	str	r3, [r7, #56]	; 0x38
   8131e:	b003      	add	sp, #12
   81320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81324:	0008123d 	.word	0x0008123d
   81328:	000825c9 	.word	0x000825c9
   8132c:	000825ed 	.word	0x000825ed
   81330:	00082629 	.word	0x00082629
   81334:	00082649 	.word	0x00082649

00081338 <__sinit>:
   81338:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8133a:	b103      	cbz	r3, 8133e <__sinit+0x6>
   8133c:	4770      	bx	lr
   8133e:	f7ff bf83 	b.w	81248 <__sinit.part.1>
   81342:	bf00      	nop

00081344 <__sfp_lock_acquire>:
   81344:	4770      	bx	lr
   81346:	bf00      	nop

00081348 <__sfp_lock_release>:
   81348:	4770      	bx	lr
   8134a:	bf00      	nop

0008134c <__libc_fini_array>:
   8134c:	b538      	push	{r3, r4, r5, lr}
   8134e:	4d07      	ldr	r5, [pc, #28]	; (8136c <__libc_fini_array+0x20>)
   81350:	4c07      	ldr	r4, [pc, #28]	; (81370 <__libc_fini_array+0x24>)
   81352:	1b2c      	subs	r4, r5, r4
   81354:	10a4      	asrs	r4, r4, #2
   81356:	d005      	beq.n	81364 <__libc_fini_array+0x18>
   81358:	3c01      	subs	r4, #1
   8135a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8135e:	4798      	blx	r3
   81360:	2c00      	cmp	r4, #0
   81362:	d1f9      	bne.n	81358 <__libc_fini_array+0xc>
   81364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81368:	f001 ba92 	b.w	82890 <_fini>
   8136c:	000828a0 	.word	0x000828a0
   81370:	0008289c 	.word	0x0008289c

00081374 <_malloc_trim_r>:
   81374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81376:	460c      	mov	r4, r1
   81378:	4f22      	ldr	r7, [pc, #136]	; (81404 <_malloc_trim_r+0x90>)
   8137a:	4606      	mov	r6, r0
   8137c:	f000 ff24 	bl	821c8 <__malloc_lock>
   81380:	68bb      	ldr	r3, [r7, #8]
   81382:	685d      	ldr	r5, [r3, #4]
   81384:	f025 0503 	bic.w	r5, r5, #3
   81388:	1b29      	subs	r1, r5, r4
   8138a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8138e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81392:	f021 010f 	bic.w	r1, r1, #15
   81396:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8139a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8139e:	db07      	blt.n	813b0 <_malloc_trim_r+0x3c>
   813a0:	2100      	movs	r1, #0
   813a2:	4630      	mov	r0, r6
   813a4:	f001 f8fe 	bl	825a4 <_sbrk_r>
   813a8:	68bb      	ldr	r3, [r7, #8]
   813aa:	442b      	add	r3, r5
   813ac:	4298      	cmp	r0, r3
   813ae:	d004      	beq.n	813ba <_malloc_trim_r+0x46>
   813b0:	4630      	mov	r0, r6
   813b2:	f000 ff0b 	bl	821cc <__malloc_unlock>
   813b6:	2000      	movs	r0, #0
   813b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   813ba:	4261      	negs	r1, r4
   813bc:	4630      	mov	r0, r6
   813be:	f001 f8f1 	bl	825a4 <_sbrk_r>
   813c2:	3001      	adds	r0, #1
   813c4:	d00d      	beq.n	813e2 <_malloc_trim_r+0x6e>
   813c6:	4b10      	ldr	r3, [pc, #64]	; (81408 <_malloc_trim_r+0x94>)
   813c8:	68ba      	ldr	r2, [r7, #8]
   813ca:	6819      	ldr	r1, [r3, #0]
   813cc:	1b2d      	subs	r5, r5, r4
   813ce:	f045 0501 	orr.w	r5, r5, #1
   813d2:	4630      	mov	r0, r6
   813d4:	1b09      	subs	r1, r1, r4
   813d6:	6055      	str	r5, [r2, #4]
   813d8:	6019      	str	r1, [r3, #0]
   813da:	f000 fef7 	bl	821cc <__malloc_unlock>
   813de:	2001      	movs	r0, #1
   813e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   813e2:	2100      	movs	r1, #0
   813e4:	4630      	mov	r0, r6
   813e6:	f001 f8dd 	bl	825a4 <_sbrk_r>
   813ea:	68ba      	ldr	r2, [r7, #8]
   813ec:	1a83      	subs	r3, r0, r2
   813ee:	2b0f      	cmp	r3, #15
   813f0:	ddde      	ble.n	813b0 <_malloc_trim_r+0x3c>
   813f2:	4c06      	ldr	r4, [pc, #24]	; (8140c <_malloc_trim_r+0x98>)
   813f4:	4904      	ldr	r1, [pc, #16]	; (81408 <_malloc_trim_r+0x94>)
   813f6:	6824      	ldr	r4, [r4, #0]
   813f8:	f043 0301 	orr.w	r3, r3, #1
   813fc:	1b00      	subs	r0, r0, r4
   813fe:	6053      	str	r3, [r2, #4]
   81400:	6008      	str	r0, [r1, #0]
   81402:	e7d5      	b.n	813b0 <_malloc_trim_r+0x3c>
   81404:	2007055c 	.word	0x2007055c
   81408:	20070a08 	.word	0x20070a08
   8140c:	20070968 	.word	0x20070968

00081410 <_free_r>:
   81410:	2900      	cmp	r1, #0
   81412:	d045      	beq.n	814a0 <_free_r+0x90>
   81414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81418:	460d      	mov	r5, r1
   8141a:	4680      	mov	r8, r0
   8141c:	f000 fed4 	bl	821c8 <__malloc_lock>
   81420:	f855 7c04 	ldr.w	r7, [r5, #-4]
   81424:	496a      	ldr	r1, [pc, #424]	; (815d0 <_free_r+0x1c0>)
   81426:	f1a5 0408 	sub.w	r4, r5, #8
   8142a:	f027 0301 	bic.w	r3, r7, #1
   8142e:	18e2      	adds	r2, r4, r3
   81430:	688e      	ldr	r6, [r1, #8]
   81432:	6850      	ldr	r0, [r2, #4]
   81434:	42b2      	cmp	r2, r6
   81436:	f020 0003 	bic.w	r0, r0, #3
   8143a:	d062      	beq.n	81502 <_free_r+0xf2>
   8143c:	07fe      	lsls	r6, r7, #31
   8143e:	6050      	str	r0, [r2, #4]
   81440:	d40b      	bmi.n	8145a <_free_r+0x4a>
   81442:	f855 7c08 	ldr.w	r7, [r5, #-8]
   81446:	f101 0e08 	add.w	lr, r1, #8
   8144a:	1be4      	subs	r4, r4, r7
   8144c:	68a5      	ldr	r5, [r4, #8]
   8144e:	443b      	add	r3, r7
   81450:	4575      	cmp	r5, lr
   81452:	d06f      	beq.n	81534 <_free_r+0x124>
   81454:	68e7      	ldr	r7, [r4, #12]
   81456:	60ef      	str	r7, [r5, #12]
   81458:	60bd      	str	r5, [r7, #8]
   8145a:	1815      	adds	r5, r2, r0
   8145c:	686d      	ldr	r5, [r5, #4]
   8145e:	07ed      	lsls	r5, r5, #31
   81460:	d542      	bpl.n	814e8 <_free_r+0xd8>
   81462:	f043 0201 	orr.w	r2, r3, #1
   81466:	6062      	str	r2, [r4, #4]
   81468:	50e3      	str	r3, [r4, r3]
   8146a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8146e:	d218      	bcs.n	814a2 <_free_r+0x92>
   81470:	08db      	lsrs	r3, r3, #3
   81472:	6848      	ldr	r0, [r1, #4]
   81474:	109d      	asrs	r5, r3, #2
   81476:	2201      	movs	r2, #1
   81478:	3301      	adds	r3, #1
   8147a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8147e:	fa02 f505 	lsl.w	r5, r2, r5
   81482:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   81486:	4328      	orrs	r0, r5
   81488:	3a08      	subs	r2, #8
   8148a:	60e2      	str	r2, [r4, #12]
   8148c:	60a7      	str	r7, [r4, #8]
   8148e:	6048      	str	r0, [r1, #4]
   81490:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   81494:	60fc      	str	r4, [r7, #12]
   81496:	4640      	mov	r0, r8
   81498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8149c:	f000 be96 	b.w	821cc <__malloc_unlock>
   814a0:	4770      	bx	lr
   814a2:	0a5a      	lsrs	r2, r3, #9
   814a4:	2a04      	cmp	r2, #4
   814a6:	d853      	bhi.n	81550 <_free_r+0x140>
   814a8:	099a      	lsrs	r2, r3, #6
   814aa:	f102 0739 	add.w	r7, r2, #57	; 0x39
   814ae:	007f      	lsls	r7, r7, #1
   814b0:	f102 0538 	add.w	r5, r2, #56	; 0x38
   814b4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   814b8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   814bc:	3808      	subs	r0, #8
   814be:	4290      	cmp	r0, r2
   814c0:	4943      	ldr	r1, [pc, #268]	; (815d0 <_free_r+0x1c0>)
   814c2:	d04d      	beq.n	81560 <_free_r+0x150>
   814c4:	6851      	ldr	r1, [r2, #4]
   814c6:	f021 0103 	bic.w	r1, r1, #3
   814ca:	428b      	cmp	r3, r1
   814cc:	d202      	bcs.n	814d4 <_free_r+0xc4>
   814ce:	6892      	ldr	r2, [r2, #8]
   814d0:	4290      	cmp	r0, r2
   814d2:	d1f7      	bne.n	814c4 <_free_r+0xb4>
   814d4:	68d0      	ldr	r0, [r2, #12]
   814d6:	60e0      	str	r0, [r4, #12]
   814d8:	60a2      	str	r2, [r4, #8]
   814da:	6084      	str	r4, [r0, #8]
   814dc:	60d4      	str	r4, [r2, #12]
   814de:	4640      	mov	r0, r8
   814e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   814e4:	f000 be72 	b.w	821cc <__malloc_unlock>
   814e8:	6895      	ldr	r5, [r2, #8]
   814ea:	4f3a      	ldr	r7, [pc, #232]	; (815d4 <_free_r+0x1c4>)
   814ec:	4403      	add	r3, r0
   814ee:	42bd      	cmp	r5, r7
   814f0:	d03f      	beq.n	81572 <_free_r+0x162>
   814f2:	68d0      	ldr	r0, [r2, #12]
   814f4:	f043 0201 	orr.w	r2, r3, #1
   814f8:	60e8      	str	r0, [r5, #12]
   814fa:	6085      	str	r5, [r0, #8]
   814fc:	6062      	str	r2, [r4, #4]
   814fe:	50e3      	str	r3, [r4, r3]
   81500:	e7b3      	b.n	8146a <_free_r+0x5a>
   81502:	07ff      	lsls	r7, r7, #31
   81504:	4403      	add	r3, r0
   81506:	d407      	bmi.n	81518 <_free_r+0x108>
   81508:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8150c:	1b64      	subs	r4, r4, r5
   8150e:	68e2      	ldr	r2, [r4, #12]
   81510:	68a0      	ldr	r0, [r4, #8]
   81512:	442b      	add	r3, r5
   81514:	60c2      	str	r2, [r0, #12]
   81516:	6090      	str	r0, [r2, #8]
   81518:	4a2f      	ldr	r2, [pc, #188]	; (815d8 <_free_r+0x1c8>)
   8151a:	f043 0001 	orr.w	r0, r3, #1
   8151e:	6812      	ldr	r2, [r2, #0]
   81520:	6060      	str	r0, [r4, #4]
   81522:	4293      	cmp	r3, r2
   81524:	608c      	str	r4, [r1, #8]
   81526:	d3b6      	bcc.n	81496 <_free_r+0x86>
   81528:	4b2c      	ldr	r3, [pc, #176]	; (815dc <_free_r+0x1cc>)
   8152a:	4640      	mov	r0, r8
   8152c:	6819      	ldr	r1, [r3, #0]
   8152e:	f7ff ff21 	bl	81374 <_malloc_trim_r>
   81532:	e7b0      	b.n	81496 <_free_r+0x86>
   81534:	1811      	adds	r1, r2, r0
   81536:	6849      	ldr	r1, [r1, #4]
   81538:	07c9      	lsls	r1, r1, #31
   8153a:	d444      	bmi.n	815c6 <_free_r+0x1b6>
   8153c:	6891      	ldr	r1, [r2, #8]
   8153e:	4403      	add	r3, r0
   81540:	68d2      	ldr	r2, [r2, #12]
   81542:	f043 0001 	orr.w	r0, r3, #1
   81546:	60ca      	str	r2, [r1, #12]
   81548:	6091      	str	r1, [r2, #8]
   8154a:	6060      	str	r0, [r4, #4]
   8154c:	50e3      	str	r3, [r4, r3]
   8154e:	e7a2      	b.n	81496 <_free_r+0x86>
   81550:	2a14      	cmp	r2, #20
   81552:	d817      	bhi.n	81584 <_free_r+0x174>
   81554:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   81558:	007f      	lsls	r7, r7, #1
   8155a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8155e:	e7a9      	b.n	814b4 <_free_r+0xa4>
   81560:	10aa      	asrs	r2, r5, #2
   81562:	684b      	ldr	r3, [r1, #4]
   81564:	2501      	movs	r5, #1
   81566:	fa05 f202 	lsl.w	r2, r5, r2
   8156a:	4313      	orrs	r3, r2
   8156c:	604b      	str	r3, [r1, #4]
   8156e:	4602      	mov	r2, r0
   81570:	e7b1      	b.n	814d6 <_free_r+0xc6>
   81572:	f043 0201 	orr.w	r2, r3, #1
   81576:	614c      	str	r4, [r1, #20]
   81578:	610c      	str	r4, [r1, #16]
   8157a:	60e5      	str	r5, [r4, #12]
   8157c:	60a5      	str	r5, [r4, #8]
   8157e:	6062      	str	r2, [r4, #4]
   81580:	50e3      	str	r3, [r4, r3]
   81582:	e788      	b.n	81496 <_free_r+0x86>
   81584:	2a54      	cmp	r2, #84	; 0x54
   81586:	d806      	bhi.n	81596 <_free_r+0x186>
   81588:	0b1a      	lsrs	r2, r3, #12
   8158a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8158e:	007f      	lsls	r7, r7, #1
   81590:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   81594:	e78e      	b.n	814b4 <_free_r+0xa4>
   81596:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8159a:	d806      	bhi.n	815aa <_free_r+0x19a>
   8159c:	0bda      	lsrs	r2, r3, #15
   8159e:	f102 0778 	add.w	r7, r2, #120	; 0x78
   815a2:	007f      	lsls	r7, r7, #1
   815a4:	f102 0577 	add.w	r5, r2, #119	; 0x77
   815a8:	e784      	b.n	814b4 <_free_r+0xa4>
   815aa:	f240 5054 	movw	r0, #1364	; 0x554
   815ae:	4282      	cmp	r2, r0
   815b0:	d806      	bhi.n	815c0 <_free_r+0x1b0>
   815b2:	0c9a      	lsrs	r2, r3, #18
   815b4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   815b8:	007f      	lsls	r7, r7, #1
   815ba:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   815be:	e779      	b.n	814b4 <_free_r+0xa4>
   815c0:	27fe      	movs	r7, #254	; 0xfe
   815c2:	257e      	movs	r5, #126	; 0x7e
   815c4:	e776      	b.n	814b4 <_free_r+0xa4>
   815c6:	f043 0201 	orr.w	r2, r3, #1
   815ca:	6062      	str	r2, [r4, #4]
   815cc:	50e3      	str	r3, [r4, r3]
   815ce:	e762      	b.n	81496 <_free_r+0x86>
   815d0:	2007055c 	.word	0x2007055c
   815d4:	20070564 	.word	0x20070564
   815d8:	20070964 	.word	0x20070964
   815dc:	20070a04 	.word	0x20070a04

000815e0 <__sfvwrite_r>:
   815e0:	6893      	ldr	r3, [r2, #8]
   815e2:	2b00      	cmp	r3, #0
   815e4:	f000 80ab 	beq.w	8173e <__sfvwrite_r+0x15e>
   815e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   815ec:	898b      	ldrh	r3, [r1, #12]
   815ee:	b085      	sub	sp, #20
   815f0:	460c      	mov	r4, r1
   815f2:	0719      	lsls	r1, r3, #28
   815f4:	9002      	str	r0, [sp, #8]
   815f6:	4616      	mov	r6, r2
   815f8:	d528      	bpl.n	8164c <__sfvwrite_r+0x6c>
   815fa:	6922      	ldr	r2, [r4, #16]
   815fc:	b332      	cbz	r2, 8164c <__sfvwrite_r+0x6c>
   815fe:	f003 0802 	and.w	r8, r3, #2
   81602:	fa1f f088 	uxth.w	r0, r8
   81606:	6835      	ldr	r5, [r6, #0]
   81608:	b378      	cbz	r0, 8166a <__sfvwrite_r+0x8a>
   8160a:	f04f 0900 	mov.w	r9, #0
   8160e:	46c8      	mov	r8, r9
   81610:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 818e4 <__sfvwrite_r+0x304>
   81614:	f1b8 0f00 	cmp.w	r8, #0
   81618:	f000 808b 	beq.w	81732 <__sfvwrite_r+0x152>
   8161c:	45d0      	cmp	r8, sl
   8161e:	4643      	mov	r3, r8
   81620:	464a      	mov	r2, r9
   81622:	bf28      	it	cs
   81624:	4653      	movcs	r3, sl
   81626:	69e1      	ldr	r1, [r4, #28]
   81628:	9802      	ldr	r0, [sp, #8]
   8162a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8162c:	47b8      	blx	r7
   8162e:	2800      	cmp	r0, #0
   81630:	f340 80a5 	ble.w	8177e <__sfvwrite_r+0x19e>
   81634:	68b3      	ldr	r3, [r6, #8]
   81636:	4481      	add	r9, r0
   81638:	1a1b      	subs	r3, r3, r0
   8163a:	ebc0 0808 	rsb	r8, r0, r8
   8163e:	60b3      	str	r3, [r6, #8]
   81640:	2b00      	cmp	r3, #0
   81642:	d1e7      	bne.n	81614 <__sfvwrite_r+0x34>
   81644:	2000      	movs	r0, #0
   81646:	b005      	add	sp, #20
   81648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8164c:	4621      	mov	r1, r4
   8164e:	9802      	ldr	r0, [sp, #8]
   81650:	f7ff fcc6 	bl	80fe0 <__swsetup_r>
   81654:	2800      	cmp	r0, #0
   81656:	f040 813c 	bne.w	818d2 <__sfvwrite_r+0x2f2>
   8165a:	89a3      	ldrh	r3, [r4, #12]
   8165c:	6835      	ldr	r5, [r6, #0]
   8165e:	f003 0802 	and.w	r8, r3, #2
   81662:	fa1f f088 	uxth.w	r0, r8
   81666:	2800      	cmp	r0, #0
   81668:	d1cf      	bne.n	8160a <__sfvwrite_r+0x2a>
   8166a:	f013 0901 	ands.w	r9, r3, #1
   8166e:	f040 8090 	bne.w	81792 <__sfvwrite_r+0x1b2>
   81672:	464f      	mov	r7, r9
   81674:	9601      	str	r6, [sp, #4]
   81676:	2f00      	cmp	r7, #0
   81678:	d056      	beq.n	81728 <__sfvwrite_r+0x148>
   8167a:	059a      	lsls	r2, r3, #22
   8167c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   81680:	d55f      	bpl.n	81742 <__sfvwrite_r+0x162>
   81682:	4547      	cmp	r7, r8
   81684:	46c2      	mov	sl, r8
   81686:	f0c0 80bf 	bcc.w	81808 <__sfvwrite_r+0x228>
   8168a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8168e:	f000 80bd 	beq.w	8180c <__sfvwrite_r+0x22c>
   81692:	6962      	ldr	r2, [r4, #20]
   81694:	6820      	ldr	r0, [r4, #0]
   81696:	6921      	ldr	r1, [r4, #16]
   81698:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8169c:	ebc1 0a00 	rsb	sl, r1, r0
   816a0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   816a4:	f10a 0001 	add.w	r0, sl, #1
   816a8:	ea4f 0868 	mov.w	r8, r8, asr #1
   816ac:	4438      	add	r0, r7
   816ae:	4540      	cmp	r0, r8
   816b0:	4642      	mov	r2, r8
   816b2:	bf84      	itt	hi
   816b4:	4680      	movhi	r8, r0
   816b6:	4642      	movhi	r2, r8
   816b8:	055b      	lsls	r3, r3, #21
   816ba:	f140 80f2 	bpl.w	818a2 <__sfvwrite_r+0x2c2>
   816be:	4611      	mov	r1, r2
   816c0:	9802      	ldr	r0, [sp, #8]
   816c2:	f000 f9b5 	bl	81a30 <_malloc_r>
   816c6:	4683      	mov	fp, r0
   816c8:	2800      	cmp	r0, #0
   816ca:	f000 8105 	beq.w	818d8 <__sfvwrite_r+0x2f8>
   816ce:	4652      	mov	r2, sl
   816d0:	6921      	ldr	r1, [r4, #16]
   816d2:	f000 fc9f 	bl	82014 <memcpy>
   816d6:	89a3      	ldrh	r3, [r4, #12]
   816d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   816dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   816e0:	81a3      	strh	r3, [r4, #12]
   816e2:	ebca 0308 	rsb	r3, sl, r8
   816e6:	eb0b 000a 	add.w	r0, fp, sl
   816ea:	f8c4 8014 	str.w	r8, [r4, #20]
   816ee:	46ba      	mov	sl, r7
   816f0:	46b8      	mov	r8, r7
   816f2:	f8c4 b010 	str.w	fp, [r4, #16]
   816f6:	6020      	str	r0, [r4, #0]
   816f8:	60a3      	str	r3, [r4, #8]
   816fa:	4652      	mov	r2, sl
   816fc:	4649      	mov	r1, r9
   816fe:	f000 fcff 	bl	82100 <memmove>
   81702:	68a0      	ldr	r0, [r4, #8]
   81704:	6823      	ldr	r3, [r4, #0]
   81706:	ebc8 0000 	rsb	r0, r8, r0
   8170a:	60a0      	str	r0, [r4, #8]
   8170c:	4638      	mov	r0, r7
   8170e:	4453      	add	r3, sl
   81710:	6023      	str	r3, [r4, #0]
   81712:	9a01      	ldr	r2, [sp, #4]
   81714:	4481      	add	r9, r0
   81716:	6893      	ldr	r3, [r2, #8]
   81718:	1a3f      	subs	r7, r7, r0
   8171a:	1a1b      	subs	r3, r3, r0
   8171c:	6093      	str	r3, [r2, #8]
   8171e:	2b00      	cmp	r3, #0
   81720:	d090      	beq.n	81644 <__sfvwrite_r+0x64>
   81722:	89a3      	ldrh	r3, [r4, #12]
   81724:	2f00      	cmp	r7, #0
   81726:	d1a8      	bne.n	8167a <__sfvwrite_r+0x9a>
   81728:	f8d5 9000 	ldr.w	r9, [r5]
   8172c:	686f      	ldr	r7, [r5, #4]
   8172e:	3508      	adds	r5, #8
   81730:	e7a1      	b.n	81676 <__sfvwrite_r+0x96>
   81732:	f8d5 9000 	ldr.w	r9, [r5]
   81736:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8173a:	3508      	adds	r5, #8
   8173c:	e76a      	b.n	81614 <__sfvwrite_r+0x34>
   8173e:	2000      	movs	r0, #0
   81740:	4770      	bx	lr
   81742:	6820      	ldr	r0, [r4, #0]
   81744:	6923      	ldr	r3, [r4, #16]
   81746:	4298      	cmp	r0, r3
   81748:	d803      	bhi.n	81752 <__sfvwrite_r+0x172>
   8174a:	6962      	ldr	r2, [r4, #20]
   8174c:	4297      	cmp	r7, r2
   8174e:	f080 8083 	bcs.w	81858 <__sfvwrite_r+0x278>
   81752:	45b8      	cmp	r8, r7
   81754:	bf28      	it	cs
   81756:	46b8      	movcs	r8, r7
   81758:	4649      	mov	r1, r9
   8175a:	4642      	mov	r2, r8
   8175c:	f000 fcd0 	bl	82100 <memmove>
   81760:	68a3      	ldr	r3, [r4, #8]
   81762:	6822      	ldr	r2, [r4, #0]
   81764:	ebc8 0303 	rsb	r3, r8, r3
   81768:	4442      	add	r2, r8
   8176a:	60a3      	str	r3, [r4, #8]
   8176c:	6022      	str	r2, [r4, #0]
   8176e:	2b00      	cmp	r3, #0
   81770:	d148      	bne.n	81804 <__sfvwrite_r+0x224>
   81772:	4621      	mov	r1, r4
   81774:	9802      	ldr	r0, [sp, #8]
   81776:	f7ff fd4b 	bl	81210 <_fflush_r>
   8177a:	2800      	cmp	r0, #0
   8177c:	d042      	beq.n	81804 <__sfvwrite_r+0x224>
   8177e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81786:	f04f 30ff 	mov.w	r0, #4294967295
   8178a:	81a3      	strh	r3, [r4, #12]
   8178c:	b005      	add	sp, #20
   8178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81792:	4680      	mov	r8, r0
   81794:	4682      	mov	sl, r0
   81796:	4681      	mov	r9, r0
   81798:	9001      	str	r0, [sp, #4]
   8179a:	f1b9 0f00 	cmp.w	r9, #0
   8179e:	d029      	beq.n	817f4 <__sfvwrite_r+0x214>
   817a0:	9b01      	ldr	r3, [sp, #4]
   817a2:	2b00      	cmp	r3, #0
   817a4:	d04b      	beq.n	8183e <__sfvwrite_r+0x25e>
   817a6:	45c8      	cmp	r8, r9
   817a8:	46c3      	mov	fp, r8
   817aa:	bf28      	it	cs
   817ac:	46cb      	movcs	fp, r9
   817ae:	6820      	ldr	r0, [r4, #0]
   817b0:	6923      	ldr	r3, [r4, #16]
   817b2:	465f      	mov	r7, fp
   817b4:	4298      	cmp	r0, r3
   817b6:	6962      	ldr	r2, [r4, #20]
   817b8:	d903      	bls.n	817c2 <__sfvwrite_r+0x1e2>
   817ba:	68a3      	ldr	r3, [r4, #8]
   817bc:	4413      	add	r3, r2
   817be:	459b      	cmp	fp, r3
   817c0:	dc5c      	bgt.n	8187c <__sfvwrite_r+0x29c>
   817c2:	4593      	cmp	fp, r2
   817c4:	db24      	blt.n	81810 <__sfvwrite_r+0x230>
   817c6:	4613      	mov	r3, r2
   817c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   817ca:	4652      	mov	r2, sl
   817cc:	69e1      	ldr	r1, [r4, #28]
   817ce:	9802      	ldr	r0, [sp, #8]
   817d0:	47b8      	blx	r7
   817d2:	1e07      	subs	r7, r0, #0
   817d4:	ddd3      	ble.n	8177e <__sfvwrite_r+0x19e>
   817d6:	ebb8 0807 	subs.w	r8, r8, r7
   817da:	d027      	beq.n	8182c <__sfvwrite_r+0x24c>
   817dc:	68b3      	ldr	r3, [r6, #8]
   817de:	44ba      	add	sl, r7
   817e0:	1bdb      	subs	r3, r3, r7
   817e2:	ebc7 0909 	rsb	r9, r7, r9
   817e6:	60b3      	str	r3, [r6, #8]
   817e8:	2b00      	cmp	r3, #0
   817ea:	f43f af2b 	beq.w	81644 <__sfvwrite_r+0x64>
   817ee:	f1b9 0f00 	cmp.w	r9, #0
   817f2:	d1d5      	bne.n	817a0 <__sfvwrite_r+0x1c0>
   817f4:	2300      	movs	r3, #0
   817f6:	f8d5 a000 	ldr.w	sl, [r5]
   817fa:	f8d5 9004 	ldr.w	r9, [r5, #4]
   817fe:	9301      	str	r3, [sp, #4]
   81800:	3508      	adds	r5, #8
   81802:	e7ca      	b.n	8179a <__sfvwrite_r+0x1ba>
   81804:	4640      	mov	r0, r8
   81806:	e784      	b.n	81712 <__sfvwrite_r+0x132>
   81808:	46b8      	mov	r8, r7
   8180a:	46ba      	mov	sl, r7
   8180c:	6820      	ldr	r0, [r4, #0]
   8180e:	e774      	b.n	816fa <__sfvwrite_r+0x11a>
   81810:	465a      	mov	r2, fp
   81812:	4651      	mov	r1, sl
   81814:	f000 fc74 	bl	82100 <memmove>
   81818:	68a2      	ldr	r2, [r4, #8]
   8181a:	6823      	ldr	r3, [r4, #0]
   8181c:	ebcb 0202 	rsb	r2, fp, r2
   81820:	445b      	add	r3, fp
   81822:	ebb8 0807 	subs.w	r8, r8, r7
   81826:	60a2      	str	r2, [r4, #8]
   81828:	6023      	str	r3, [r4, #0]
   8182a:	d1d7      	bne.n	817dc <__sfvwrite_r+0x1fc>
   8182c:	4621      	mov	r1, r4
   8182e:	9802      	ldr	r0, [sp, #8]
   81830:	f7ff fcee 	bl	81210 <_fflush_r>
   81834:	2800      	cmp	r0, #0
   81836:	d1a2      	bne.n	8177e <__sfvwrite_r+0x19e>
   81838:	f8cd 8004 	str.w	r8, [sp, #4]
   8183c:	e7ce      	b.n	817dc <__sfvwrite_r+0x1fc>
   8183e:	464a      	mov	r2, r9
   81840:	210a      	movs	r1, #10
   81842:	4650      	mov	r0, sl
   81844:	f000 fba0 	bl	81f88 <memchr>
   81848:	2800      	cmp	r0, #0
   8184a:	d03d      	beq.n	818c8 <__sfvwrite_r+0x2e8>
   8184c:	3001      	adds	r0, #1
   8184e:	2301      	movs	r3, #1
   81850:	ebca 0800 	rsb	r8, sl, r0
   81854:	9301      	str	r3, [sp, #4]
   81856:	e7a6      	b.n	817a6 <__sfvwrite_r+0x1c6>
   81858:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8185c:	42bb      	cmp	r3, r7
   8185e:	bf28      	it	cs
   81860:	463b      	movcs	r3, r7
   81862:	fb93 f3f2 	sdiv	r3, r3, r2
   81866:	69e1      	ldr	r1, [r4, #28]
   81868:	fb02 f303 	mul.w	r3, r2, r3
   8186c:	9802      	ldr	r0, [sp, #8]
   8186e:	464a      	mov	r2, r9
   81870:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81872:	47b0      	blx	r6
   81874:	2800      	cmp	r0, #0
   81876:	f73f af4c 	bgt.w	81712 <__sfvwrite_r+0x132>
   8187a:	e780      	b.n	8177e <__sfvwrite_r+0x19e>
   8187c:	461a      	mov	r2, r3
   8187e:	4651      	mov	r1, sl
   81880:	9303      	str	r3, [sp, #12]
   81882:	f000 fc3d 	bl	82100 <memmove>
   81886:	6822      	ldr	r2, [r4, #0]
   81888:	9b03      	ldr	r3, [sp, #12]
   8188a:	4621      	mov	r1, r4
   8188c:	441a      	add	r2, r3
   8188e:	6022      	str	r2, [r4, #0]
   81890:	9802      	ldr	r0, [sp, #8]
   81892:	f7ff fcbd 	bl	81210 <_fflush_r>
   81896:	9b03      	ldr	r3, [sp, #12]
   81898:	2800      	cmp	r0, #0
   8189a:	f47f af70 	bne.w	8177e <__sfvwrite_r+0x19e>
   8189e:	461f      	mov	r7, r3
   818a0:	e799      	b.n	817d6 <__sfvwrite_r+0x1f6>
   818a2:	9802      	ldr	r0, [sp, #8]
   818a4:	f000 fc94 	bl	821d0 <_realloc_r>
   818a8:	4683      	mov	fp, r0
   818aa:	2800      	cmp	r0, #0
   818ac:	f47f af19 	bne.w	816e2 <__sfvwrite_r+0x102>
   818b0:	9d02      	ldr	r5, [sp, #8]
   818b2:	6921      	ldr	r1, [r4, #16]
   818b4:	4628      	mov	r0, r5
   818b6:	f7ff fdab 	bl	81410 <_free_r>
   818ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   818be:	220c      	movs	r2, #12
   818c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   818c4:	602a      	str	r2, [r5, #0]
   818c6:	e75c      	b.n	81782 <__sfvwrite_r+0x1a2>
   818c8:	2301      	movs	r3, #1
   818ca:	f109 0801 	add.w	r8, r9, #1
   818ce:	9301      	str	r3, [sp, #4]
   818d0:	e769      	b.n	817a6 <__sfvwrite_r+0x1c6>
   818d2:	f04f 30ff 	mov.w	r0, #4294967295
   818d6:	e6b6      	b.n	81646 <__sfvwrite_r+0x66>
   818d8:	9a02      	ldr	r2, [sp, #8]
   818da:	230c      	movs	r3, #12
   818dc:	6013      	str	r3, [r2, #0]
   818de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   818e2:	e74e      	b.n	81782 <__sfvwrite_r+0x1a2>
   818e4:	7ffffc00 	.word	0x7ffffc00

000818e8 <_fwalk_reent>:
   818e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   818ec:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   818f0:	d01e      	beq.n	81930 <_fwalk_reent+0x48>
   818f2:	4688      	mov	r8, r1
   818f4:	4607      	mov	r7, r0
   818f6:	f04f 0900 	mov.w	r9, #0
   818fa:	6875      	ldr	r5, [r6, #4]
   818fc:	68b4      	ldr	r4, [r6, #8]
   818fe:	3d01      	subs	r5, #1
   81900:	d410      	bmi.n	81924 <_fwalk_reent+0x3c>
   81902:	89a3      	ldrh	r3, [r4, #12]
   81904:	3d01      	subs	r5, #1
   81906:	2b01      	cmp	r3, #1
   81908:	d908      	bls.n	8191c <_fwalk_reent+0x34>
   8190a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8190e:	3301      	adds	r3, #1
   81910:	d004      	beq.n	8191c <_fwalk_reent+0x34>
   81912:	4621      	mov	r1, r4
   81914:	4638      	mov	r0, r7
   81916:	47c0      	blx	r8
   81918:	ea49 0900 	orr.w	r9, r9, r0
   8191c:	1c6b      	adds	r3, r5, #1
   8191e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   81922:	d1ee      	bne.n	81902 <_fwalk_reent+0x1a>
   81924:	6836      	ldr	r6, [r6, #0]
   81926:	2e00      	cmp	r6, #0
   81928:	d1e7      	bne.n	818fa <_fwalk_reent+0x12>
   8192a:	4648      	mov	r0, r9
   8192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81930:	46b1      	mov	r9, r6
   81932:	4648      	mov	r0, r9
   81934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081938 <__swhatbuf_r>:
   81938:	b570      	push	{r4, r5, r6, lr}
   8193a:	460e      	mov	r6, r1
   8193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81940:	b090      	sub	sp, #64	; 0x40
   81942:	2900      	cmp	r1, #0
   81944:	4614      	mov	r4, r2
   81946:	461d      	mov	r5, r3
   81948:	db14      	blt.n	81974 <__swhatbuf_r+0x3c>
   8194a:	aa01      	add	r2, sp, #4
   8194c:	f000 ff3c 	bl	827c8 <_fstat_r>
   81950:	2800      	cmp	r0, #0
   81952:	db0f      	blt.n	81974 <__swhatbuf_r+0x3c>
   81954:	9a02      	ldr	r2, [sp, #8]
   81956:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8195a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8195e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   81962:	fab2 f282 	clz	r2, r2
   81966:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8196a:	0952      	lsrs	r2, r2, #5
   8196c:	602a      	str	r2, [r5, #0]
   8196e:	6023      	str	r3, [r4, #0]
   81970:	b010      	add	sp, #64	; 0x40
   81972:	bd70      	pop	{r4, r5, r6, pc}
   81974:	89b2      	ldrh	r2, [r6, #12]
   81976:	2000      	movs	r0, #0
   81978:	f002 0280 	and.w	r2, r2, #128	; 0x80
   8197c:	b292      	uxth	r2, r2
   8197e:	6028      	str	r0, [r5, #0]
   81980:	b11a      	cbz	r2, 8198a <__swhatbuf_r+0x52>
   81982:	2340      	movs	r3, #64	; 0x40
   81984:	6023      	str	r3, [r4, #0]
   81986:	b010      	add	sp, #64	; 0x40
   81988:	bd70      	pop	{r4, r5, r6, pc}
   8198a:	4610      	mov	r0, r2
   8198c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81990:	6023      	str	r3, [r4, #0]
   81992:	b010      	add	sp, #64	; 0x40
   81994:	bd70      	pop	{r4, r5, r6, pc}
   81996:	bf00      	nop

00081998 <__smakebuf_r>:
   81998:	898a      	ldrh	r2, [r1, #12]
   8199a:	460b      	mov	r3, r1
   8199c:	0792      	lsls	r2, r2, #30
   8199e:	d506      	bpl.n	819ae <__smakebuf_r+0x16>
   819a0:	f101 0243 	add.w	r2, r1, #67	; 0x43
   819a4:	2101      	movs	r1, #1
   819a6:	601a      	str	r2, [r3, #0]
   819a8:	611a      	str	r2, [r3, #16]
   819aa:	6159      	str	r1, [r3, #20]
   819ac:	4770      	bx	lr
   819ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   819b0:	b083      	sub	sp, #12
   819b2:	ab01      	add	r3, sp, #4
   819b4:	466a      	mov	r2, sp
   819b6:	460c      	mov	r4, r1
   819b8:	4605      	mov	r5, r0
   819ba:	f7ff ffbd 	bl	81938 <__swhatbuf_r>
   819be:	9900      	ldr	r1, [sp, #0]
   819c0:	4606      	mov	r6, r0
   819c2:	4628      	mov	r0, r5
   819c4:	f000 f834 	bl	81a30 <_malloc_r>
   819c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   819cc:	b1d0      	cbz	r0, 81a04 <__smakebuf_r+0x6c>
   819ce:	e89d 0006 	ldmia.w	sp, {r1, r2}
   819d2:	4f12      	ldr	r7, [pc, #72]	; (81a1c <__smakebuf_r+0x84>)
   819d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   819d8:	63ef      	str	r7, [r5, #60]	; 0x3c
   819da:	81a3      	strh	r3, [r4, #12]
   819dc:	6020      	str	r0, [r4, #0]
   819de:	6120      	str	r0, [r4, #16]
   819e0:	6161      	str	r1, [r4, #20]
   819e2:	b91a      	cbnz	r2, 819ec <__smakebuf_r+0x54>
   819e4:	4333      	orrs	r3, r6
   819e6:	81a3      	strh	r3, [r4, #12]
   819e8:	b003      	add	sp, #12
   819ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   819ec:	4628      	mov	r0, r5
   819ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   819f2:	f000 fefd 	bl	827f0 <_isatty_r>
   819f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   819fa:	2800      	cmp	r0, #0
   819fc:	d0f2      	beq.n	819e4 <__smakebuf_r+0x4c>
   819fe:	f043 0301 	orr.w	r3, r3, #1
   81a02:	e7ef      	b.n	819e4 <__smakebuf_r+0x4c>
   81a04:	059a      	lsls	r2, r3, #22
   81a06:	d4ef      	bmi.n	819e8 <__smakebuf_r+0x50>
   81a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81a0c:	f043 0302 	orr.w	r3, r3, #2
   81a10:	2101      	movs	r1, #1
   81a12:	81a3      	strh	r3, [r4, #12]
   81a14:	6022      	str	r2, [r4, #0]
   81a16:	6122      	str	r2, [r4, #16]
   81a18:	6161      	str	r1, [r4, #20]
   81a1a:	e7e5      	b.n	819e8 <__smakebuf_r+0x50>
   81a1c:	0008123d 	.word	0x0008123d

00081a20 <malloc>:
   81a20:	4b02      	ldr	r3, [pc, #8]	; (81a2c <malloc+0xc>)
   81a22:	4601      	mov	r1, r0
   81a24:	6818      	ldr	r0, [r3, #0]
   81a26:	f000 b803 	b.w	81a30 <_malloc_r>
   81a2a:	bf00      	nop
   81a2c:	20070558 	.word	0x20070558

00081a30 <_malloc_r>:
   81a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a34:	f101 050b 	add.w	r5, r1, #11
   81a38:	2d16      	cmp	r5, #22
   81a3a:	b083      	sub	sp, #12
   81a3c:	4606      	mov	r6, r0
   81a3e:	f240 80a0 	bls.w	81b82 <_malloc_r+0x152>
   81a42:	f035 0507 	bics.w	r5, r5, #7
   81a46:	f100 80c0 	bmi.w	81bca <_malloc_r+0x19a>
   81a4a:	42a9      	cmp	r1, r5
   81a4c:	f200 80bd 	bhi.w	81bca <_malloc_r+0x19a>
   81a50:	f000 fbba 	bl	821c8 <__malloc_lock>
   81a54:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   81a58:	f0c0 8290 	bcc.w	81f7c <_malloc_r+0x54c>
   81a5c:	0a6b      	lsrs	r3, r5, #9
   81a5e:	f000 80bb 	beq.w	81bd8 <_malloc_r+0x1a8>
   81a62:	2b04      	cmp	r3, #4
   81a64:	f200 8177 	bhi.w	81d56 <_malloc_r+0x326>
   81a68:	09a8      	lsrs	r0, r5, #6
   81a6a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   81a6e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   81a72:	3038      	adds	r0, #56	; 0x38
   81a74:	4fbe      	ldr	r7, [pc, #760]	; (81d70 <_malloc_r+0x340>)
   81a76:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   81a7a:	684c      	ldr	r4, [r1, #4]
   81a7c:	3908      	subs	r1, #8
   81a7e:	42a1      	cmp	r1, r4
   81a80:	d107      	bne.n	81a92 <_malloc_r+0x62>
   81a82:	e0ae      	b.n	81be2 <_malloc_r+0x1b2>
   81a84:	2a00      	cmp	r2, #0
   81a86:	f280 80ae 	bge.w	81be6 <_malloc_r+0x1b6>
   81a8a:	68e4      	ldr	r4, [r4, #12]
   81a8c:	42a1      	cmp	r1, r4
   81a8e:	f000 80a8 	beq.w	81be2 <_malloc_r+0x1b2>
   81a92:	6863      	ldr	r3, [r4, #4]
   81a94:	f023 0303 	bic.w	r3, r3, #3
   81a98:	1b5a      	subs	r2, r3, r5
   81a9a:	2a0f      	cmp	r2, #15
   81a9c:	ddf2      	ble.n	81a84 <_malloc_r+0x54>
   81a9e:	49b4      	ldr	r1, [pc, #720]	; (81d70 <_malloc_r+0x340>)
   81aa0:	693c      	ldr	r4, [r7, #16]
   81aa2:	f101 0e08 	add.w	lr, r1, #8
   81aa6:	4574      	cmp	r4, lr
   81aa8:	f000 81a8 	beq.w	81dfc <_malloc_r+0x3cc>
   81aac:	6863      	ldr	r3, [r4, #4]
   81aae:	f023 0303 	bic.w	r3, r3, #3
   81ab2:	1b5a      	subs	r2, r3, r5
   81ab4:	2a0f      	cmp	r2, #15
   81ab6:	f300 818e 	bgt.w	81dd6 <_malloc_r+0x3a6>
   81aba:	2a00      	cmp	r2, #0
   81abc:	f8c1 e014 	str.w	lr, [r1, #20]
   81ac0:	f8c1 e010 	str.w	lr, [r1, #16]
   81ac4:	f280 8093 	bge.w	81bee <_malloc_r+0x1be>
   81ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81acc:	f080 815c 	bcs.w	81d88 <_malloc_r+0x358>
   81ad0:	08db      	lsrs	r3, r3, #3
   81ad2:	684a      	ldr	r2, [r1, #4]
   81ad4:	ea4f 09a3 	mov.w	r9, r3, asr #2
   81ad8:	f04f 0c01 	mov.w	ip, #1
   81adc:	3301      	adds	r3, #1
   81ade:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   81ae2:	fa0c f909 	lsl.w	r9, ip, r9
   81ae6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   81aea:	ea49 0202 	orr.w	r2, r9, r2
   81aee:	f1ac 0c08 	sub.w	ip, ip, #8
   81af2:	f8c4 c00c 	str.w	ip, [r4, #12]
   81af6:	f8c4 8008 	str.w	r8, [r4, #8]
   81afa:	604a      	str	r2, [r1, #4]
   81afc:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   81b00:	f8c8 400c 	str.w	r4, [r8, #12]
   81b04:	1083      	asrs	r3, r0, #2
   81b06:	2401      	movs	r4, #1
   81b08:	409c      	lsls	r4, r3
   81b0a:	4294      	cmp	r4, r2
   81b0c:	d87c      	bhi.n	81c08 <_malloc_r+0x1d8>
   81b0e:	4214      	tst	r4, r2
   81b10:	d106      	bne.n	81b20 <_malloc_r+0xf0>
   81b12:	f020 0003 	bic.w	r0, r0, #3
   81b16:	0064      	lsls	r4, r4, #1
   81b18:	4214      	tst	r4, r2
   81b1a:	f100 0004 	add.w	r0, r0, #4
   81b1e:	d0fa      	beq.n	81b16 <_malloc_r+0xe6>
   81b20:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81b24:	46cc      	mov	ip, r9
   81b26:	4680      	mov	r8, r0
   81b28:	f8dc 100c 	ldr.w	r1, [ip, #12]
   81b2c:	458c      	cmp	ip, r1
   81b2e:	d107      	bne.n	81b40 <_malloc_r+0x110>
   81b30:	e166      	b.n	81e00 <_malloc_r+0x3d0>
   81b32:	2a00      	cmp	r2, #0
   81b34:	f280 8174 	bge.w	81e20 <_malloc_r+0x3f0>
   81b38:	68c9      	ldr	r1, [r1, #12]
   81b3a:	458c      	cmp	ip, r1
   81b3c:	f000 8160 	beq.w	81e00 <_malloc_r+0x3d0>
   81b40:	684b      	ldr	r3, [r1, #4]
   81b42:	f023 0303 	bic.w	r3, r3, #3
   81b46:	1b5a      	subs	r2, r3, r5
   81b48:	2a0f      	cmp	r2, #15
   81b4a:	ddf2      	ble.n	81b32 <_malloc_r+0x102>
   81b4c:	460c      	mov	r4, r1
   81b4e:	68cb      	ldr	r3, [r1, #12]
   81b50:	f854 cf08 	ldr.w	ip, [r4, #8]!
   81b54:	f045 0801 	orr.w	r8, r5, #1
   81b58:	f8c1 8004 	str.w	r8, [r1, #4]
   81b5c:	440d      	add	r5, r1
   81b5e:	f042 0101 	orr.w	r1, r2, #1
   81b62:	f8cc 300c 	str.w	r3, [ip, #12]
   81b66:	4630      	mov	r0, r6
   81b68:	f8c3 c008 	str.w	ip, [r3, #8]
   81b6c:	617d      	str	r5, [r7, #20]
   81b6e:	613d      	str	r5, [r7, #16]
   81b70:	f8c5 e00c 	str.w	lr, [r5, #12]
   81b74:	f8c5 e008 	str.w	lr, [r5, #8]
   81b78:	6069      	str	r1, [r5, #4]
   81b7a:	50aa      	str	r2, [r5, r2]
   81b7c:	f000 fb26 	bl	821cc <__malloc_unlock>
   81b80:	e01f      	b.n	81bc2 <_malloc_r+0x192>
   81b82:	2910      	cmp	r1, #16
   81b84:	d821      	bhi.n	81bca <_malloc_r+0x19a>
   81b86:	f000 fb1f 	bl	821c8 <__malloc_lock>
   81b8a:	2510      	movs	r5, #16
   81b8c:	2306      	movs	r3, #6
   81b8e:	2002      	movs	r0, #2
   81b90:	4f77      	ldr	r7, [pc, #476]	; (81d70 <_malloc_r+0x340>)
   81b92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   81b96:	685c      	ldr	r4, [r3, #4]
   81b98:	f1a3 0208 	sub.w	r2, r3, #8
   81b9c:	4294      	cmp	r4, r2
   81b9e:	f000 8138 	beq.w	81e12 <_malloc_r+0x3e2>
   81ba2:	6863      	ldr	r3, [r4, #4]
   81ba4:	68e1      	ldr	r1, [r4, #12]
   81ba6:	f023 0303 	bic.w	r3, r3, #3
   81baa:	4423      	add	r3, r4
   81bac:	685a      	ldr	r2, [r3, #4]
   81bae:	68a5      	ldr	r5, [r4, #8]
   81bb0:	f042 0201 	orr.w	r2, r2, #1
   81bb4:	60e9      	str	r1, [r5, #12]
   81bb6:	4630      	mov	r0, r6
   81bb8:	608d      	str	r5, [r1, #8]
   81bba:	605a      	str	r2, [r3, #4]
   81bbc:	f000 fb06 	bl	821cc <__malloc_unlock>
   81bc0:	3408      	adds	r4, #8
   81bc2:	4620      	mov	r0, r4
   81bc4:	b003      	add	sp, #12
   81bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bca:	2400      	movs	r4, #0
   81bcc:	4620      	mov	r0, r4
   81bce:	230c      	movs	r3, #12
   81bd0:	6033      	str	r3, [r6, #0]
   81bd2:	b003      	add	sp, #12
   81bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bd8:	2180      	movs	r1, #128	; 0x80
   81bda:	f04f 0e40 	mov.w	lr, #64	; 0x40
   81bde:	203f      	movs	r0, #63	; 0x3f
   81be0:	e748      	b.n	81a74 <_malloc_r+0x44>
   81be2:	4670      	mov	r0, lr
   81be4:	e75b      	b.n	81a9e <_malloc_r+0x6e>
   81be6:	4423      	add	r3, r4
   81be8:	685a      	ldr	r2, [r3, #4]
   81bea:	68e1      	ldr	r1, [r4, #12]
   81bec:	e7df      	b.n	81bae <_malloc_r+0x17e>
   81bee:	4423      	add	r3, r4
   81bf0:	685a      	ldr	r2, [r3, #4]
   81bf2:	4630      	mov	r0, r6
   81bf4:	f042 0201 	orr.w	r2, r2, #1
   81bf8:	605a      	str	r2, [r3, #4]
   81bfa:	3408      	adds	r4, #8
   81bfc:	f000 fae6 	bl	821cc <__malloc_unlock>
   81c00:	4620      	mov	r0, r4
   81c02:	b003      	add	sp, #12
   81c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c08:	68bc      	ldr	r4, [r7, #8]
   81c0a:	6863      	ldr	r3, [r4, #4]
   81c0c:	f023 0803 	bic.w	r8, r3, #3
   81c10:	45a8      	cmp	r8, r5
   81c12:	d304      	bcc.n	81c1e <_malloc_r+0x1ee>
   81c14:	ebc5 0308 	rsb	r3, r5, r8
   81c18:	2b0f      	cmp	r3, #15
   81c1a:	f300 808c 	bgt.w	81d36 <_malloc_r+0x306>
   81c1e:	4b55      	ldr	r3, [pc, #340]	; (81d74 <_malloc_r+0x344>)
   81c20:	f8df 9160 	ldr.w	r9, [pc, #352]	; 81d84 <_malloc_r+0x354>
   81c24:	681a      	ldr	r2, [r3, #0]
   81c26:	f8d9 3000 	ldr.w	r3, [r9]
   81c2a:	442a      	add	r2, r5
   81c2c:	3301      	adds	r3, #1
   81c2e:	eb04 0a08 	add.w	sl, r4, r8
   81c32:	f000 8160 	beq.w	81ef6 <_malloc_r+0x4c6>
   81c36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   81c3a:	320f      	adds	r2, #15
   81c3c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   81c40:	f022 020f 	bic.w	r2, r2, #15
   81c44:	4611      	mov	r1, r2
   81c46:	4630      	mov	r0, r6
   81c48:	9201      	str	r2, [sp, #4]
   81c4a:	f000 fcab 	bl	825a4 <_sbrk_r>
   81c4e:	f1b0 3fff 	cmp.w	r0, #4294967295
   81c52:	4683      	mov	fp, r0
   81c54:	9a01      	ldr	r2, [sp, #4]
   81c56:	f000 8158 	beq.w	81f0a <_malloc_r+0x4da>
   81c5a:	4582      	cmp	sl, r0
   81c5c:	f200 80fc 	bhi.w	81e58 <_malloc_r+0x428>
   81c60:	4b45      	ldr	r3, [pc, #276]	; (81d78 <_malloc_r+0x348>)
   81c62:	45da      	cmp	sl, fp
   81c64:	6819      	ldr	r1, [r3, #0]
   81c66:	4411      	add	r1, r2
   81c68:	6019      	str	r1, [r3, #0]
   81c6a:	f000 8153 	beq.w	81f14 <_malloc_r+0x4e4>
   81c6e:	f8d9 0000 	ldr.w	r0, [r9]
   81c72:	f8df e110 	ldr.w	lr, [pc, #272]	; 81d84 <_malloc_r+0x354>
   81c76:	3001      	adds	r0, #1
   81c78:	bf1b      	ittet	ne
   81c7a:	ebca 0a0b 	rsbne	sl, sl, fp
   81c7e:	4451      	addne	r1, sl
   81c80:	f8ce b000 	streq.w	fp, [lr]
   81c84:	6019      	strne	r1, [r3, #0]
   81c86:	f01b 0107 	ands.w	r1, fp, #7
   81c8a:	f000 8117 	beq.w	81ebc <_malloc_r+0x48c>
   81c8e:	f1c1 0008 	rsb	r0, r1, #8
   81c92:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81c96:	4483      	add	fp, r0
   81c98:	3108      	adds	r1, #8
   81c9a:	445a      	add	r2, fp
   81c9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   81ca0:	ebc2 0901 	rsb	r9, r2, r1
   81ca4:	4649      	mov	r1, r9
   81ca6:	4630      	mov	r0, r6
   81ca8:	9301      	str	r3, [sp, #4]
   81caa:	f000 fc7b 	bl	825a4 <_sbrk_r>
   81cae:	1c43      	adds	r3, r0, #1
   81cb0:	9b01      	ldr	r3, [sp, #4]
   81cb2:	f000 813f 	beq.w	81f34 <_malloc_r+0x504>
   81cb6:	ebcb 0200 	rsb	r2, fp, r0
   81cba:	444a      	add	r2, r9
   81cbc:	f042 0201 	orr.w	r2, r2, #1
   81cc0:	6819      	ldr	r1, [r3, #0]
   81cc2:	42bc      	cmp	r4, r7
   81cc4:	4449      	add	r1, r9
   81cc6:	f8c7 b008 	str.w	fp, [r7, #8]
   81cca:	6019      	str	r1, [r3, #0]
   81ccc:	f8cb 2004 	str.w	r2, [fp, #4]
   81cd0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 81d78 <_malloc_r+0x348>
   81cd4:	d016      	beq.n	81d04 <_malloc_r+0x2d4>
   81cd6:	f1b8 0f0f 	cmp.w	r8, #15
   81cda:	f240 80fd 	bls.w	81ed8 <_malloc_r+0x4a8>
   81cde:	6862      	ldr	r2, [r4, #4]
   81ce0:	f1a8 030c 	sub.w	r3, r8, #12
   81ce4:	f023 0307 	bic.w	r3, r3, #7
   81ce8:	f002 0201 	and.w	r2, r2, #1
   81cec:	18e0      	adds	r0, r4, r3
   81cee:	f04f 0e05 	mov.w	lr, #5
   81cf2:	431a      	orrs	r2, r3
   81cf4:	2b0f      	cmp	r3, #15
   81cf6:	6062      	str	r2, [r4, #4]
   81cf8:	f8c0 e004 	str.w	lr, [r0, #4]
   81cfc:	f8c0 e008 	str.w	lr, [r0, #8]
   81d00:	f200 811c 	bhi.w	81f3c <_malloc_r+0x50c>
   81d04:	4b1d      	ldr	r3, [pc, #116]	; (81d7c <_malloc_r+0x34c>)
   81d06:	68bc      	ldr	r4, [r7, #8]
   81d08:	681a      	ldr	r2, [r3, #0]
   81d0a:	4291      	cmp	r1, r2
   81d0c:	bf88      	it	hi
   81d0e:	6019      	strhi	r1, [r3, #0]
   81d10:	4b1b      	ldr	r3, [pc, #108]	; (81d80 <_malloc_r+0x350>)
   81d12:	681a      	ldr	r2, [r3, #0]
   81d14:	4291      	cmp	r1, r2
   81d16:	6862      	ldr	r2, [r4, #4]
   81d18:	bf88      	it	hi
   81d1a:	6019      	strhi	r1, [r3, #0]
   81d1c:	f022 0203 	bic.w	r2, r2, #3
   81d20:	4295      	cmp	r5, r2
   81d22:	eba2 0305 	sub.w	r3, r2, r5
   81d26:	d801      	bhi.n	81d2c <_malloc_r+0x2fc>
   81d28:	2b0f      	cmp	r3, #15
   81d2a:	dc04      	bgt.n	81d36 <_malloc_r+0x306>
   81d2c:	4630      	mov	r0, r6
   81d2e:	f000 fa4d 	bl	821cc <__malloc_unlock>
   81d32:	2400      	movs	r4, #0
   81d34:	e745      	b.n	81bc2 <_malloc_r+0x192>
   81d36:	f045 0201 	orr.w	r2, r5, #1
   81d3a:	f043 0301 	orr.w	r3, r3, #1
   81d3e:	4425      	add	r5, r4
   81d40:	6062      	str	r2, [r4, #4]
   81d42:	4630      	mov	r0, r6
   81d44:	60bd      	str	r5, [r7, #8]
   81d46:	3408      	adds	r4, #8
   81d48:	606b      	str	r3, [r5, #4]
   81d4a:	f000 fa3f 	bl	821cc <__malloc_unlock>
   81d4e:	4620      	mov	r0, r4
   81d50:	b003      	add	sp, #12
   81d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d56:	2b14      	cmp	r3, #20
   81d58:	d971      	bls.n	81e3e <_malloc_r+0x40e>
   81d5a:	2b54      	cmp	r3, #84	; 0x54
   81d5c:	f200 80a4 	bhi.w	81ea8 <_malloc_r+0x478>
   81d60:	0b28      	lsrs	r0, r5, #12
   81d62:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   81d66:	ea4f 014e 	mov.w	r1, lr, lsl #1
   81d6a:	306e      	adds	r0, #110	; 0x6e
   81d6c:	e682      	b.n	81a74 <_malloc_r+0x44>
   81d6e:	bf00      	nop
   81d70:	2007055c 	.word	0x2007055c
   81d74:	20070a04 	.word	0x20070a04
   81d78:	20070a08 	.word	0x20070a08
   81d7c:	20070a00 	.word	0x20070a00
   81d80:	200709fc 	.word	0x200709fc
   81d84:	20070968 	.word	0x20070968
   81d88:	0a5a      	lsrs	r2, r3, #9
   81d8a:	2a04      	cmp	r2, #4
   81d8c:	d95e      	bls.n	81e4c <_malloc_r+0x41c>
   81d8e:	2a14      	cmp	r2, #20
   81d90:	f200 80b3 	bhi.w	81efa <_malloc_r+0x4ca>
   81d94:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81d98:	0049      	lsls	r1, r1, #1
   81d9a:	325b      	adds	r2, #91	; 0x5b
   81d9c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   81da0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   81da4:	f1ac 0c08 	sub.w	ip, ip, #8
   81da8:	458c      	cmp	ip, r1
   81daa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 81f84 <_malloc_r+0x554>
   81dae:	f000 8088 	beq.w	81ec2 <_malloc_r+0x492>
   81db2:	684a      	ldr	r2, [r1, #4]
   81db4:	f022 0203 	bic.w	r2, r2, #3
   81db8:	4293      	cmp	r3, r2
   81dba:	d202      	bcs.n	81dc2 <_malloc_r+0x392>
   81dbc:	6889      	ldr	r1, [r1, #8]
   81dbe:	458c      	cmp	ip, r1
   81dc0:	d1f7      	bne.n	81db2 <_malloc_r+0x382>
   81dc2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   81dc6:	687a      	ldr	r2, [r7, #4]
   81dc8:	f8c4 c00c 	str.w	ip, [r4, #12]
   81dcc:	60a1      	str	r1, [r4, #8]
   81dce:	f8cc 4008 	str.w	r4, [ip, #8]
   81dd2:	60cc      	str	r4, [r1, #12]
   81dd4:	e696      	b.n	81b04 <_malloc_r+0xd4>
   81dd6:	f045 0701 	orr.w	r7, r5, #1
   81dda:	f042 0301 	orr.w	r3, r2, #1
   81dde:	4425      	add	r5, r4
   81de0:	6067      	str	r7, [r4, #4]
   81de2:	4630      	mov	r0, r6
   81de4:	614d      	str	r5, [r1, #20]
   81de6:	610d      	str	r5, [r1, #16]
   81de8:	f8c5 e00c 	str.w	lr, [r5, #12]
   81dec:	f8c5 e008 	str.w	lr, [r5, #8]
   81df0:	606b      	str	r3, [r5, #4]
   81df2:	50aa      	str	r2, [r5, r2]
   81df4:	3408      	adds	r4, #8
   81df6:	f000 f9e9 	bl	821cc <__malloc_unlock>
   81dfa:	e6e2      	b.n	81bc2 <_malloc_r+0x192>
   81dfc:	684a      	ldr	r2, [r1, #4]
   81dfe:	e681      	b.n	81b04 <_malloc_r+0xd4>
   81e00:	f108 0801 	add.w	r8, r8, #1
   81e04:	f018 0f03 	tst.w	r8, #3
   81e08:	f10c 0c08 	add.w	ip, ip, #8
   81e0c:	f47f ae8c 	bne.w	81b28 <_malloc_r+0xf8>
   81e10:	e030      	b.n	81e74 <_malloc_r+0x444>
   81e12:	68dc      	ldr	r4, [r3, #12]
   81e14:	42a3      	cmp	r3, r4
   81e16:	bf08      	it	eq
   81e18:	3002      	addeq	r0, #2
   81e1a:	f43f ae40 	beq.w	81a9e <_malloc_r+0x6e>
   81e1e:	e6c0      	b.n	81ba2 <_malloc_r+0x172>
   81e20:	460c      	mov	r4, r1
   81e22:	440b      	add	r3, r1
   81e24:	685a      	ldr	r2, [r3, #4]
   81e26:	68c9      	ldr	r1, [r1, #12]
   81e28:	f854 5f08 	ldr.w	r5, [r4, #8]!
   81e2c:	f042 0201 	orr.w	r2, r2, #1
   81e30:	605a      	str	r2, [r3, #4]
   81e32:	4630      	mov	r0, r6
   81e34:	60e9      	str	r1, [r5, #12]
   81e36:	608d      	str	r5, [r1, #8]
   81e38:	f000 f9c8 	bl	821cc <__malloc_unlock>
   81e3c:	e6c1      	b.n	81bc2 <_malloc_r+0x192>
   81e3e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   81e42:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   81e46:	ea4f 014e 	mov.w	r1, lr, lsl #1
   81e4a:	e613      	b.n	81a74 <_malloc_r+0x44>
   81e4c:	099a      	lsrs	r2, r3, #6
   81e4e:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81e52:	0049      	lsls	r1, r1, #1
   81e54:	3238      	adds	r2, #56	; 0x38
   81e56:	e7a1      	b.n	81d9c <_malloc_r+0x36c>
   81e58:	42bc      	cmp	r4, r7
   81e5a:	4b4a      	ldr	r3, [pc, #296]	; (81f84 <_malloc_r+0x554>)
   81e5c:	f43f af00 	beq.w	81c60 <_malloc_r+0x230>
   81e60:	689c      	ldr	r4, [r3, #8]
   81e62:	6862      	ldr	r2, [r4, #4]
   81e64:	f022 0203 	bic.w	r2, r2, #3
   81e68:	e75a      	b.n	81d20 <_malloc_r+0x2f0>
   81e6a:	f859 3908 	ldr.w	r3, [r9], #-8
   81e6e:	4599      	cmp	r9, r3
   81e70:	f040 8082 	bne.w	81f78 <_malloc_r+0x548>
   81e74:	f010 0f03 	tst.w	r0, #3
   81e78:	f100 30ff 	add.w	r0, r0, #4294967295
   81e7c:	d1f5      	bne.n	81e6a <_malloc_r+0x43a>
   81e7e:	687b      	ldr	r3, [r7, #4]
   81e80:	ea23 0304 	bic.w	r3, r3, r4
   81e84:	607b      	str	r3, [r7, #4]
   81e86:	0064      	lsls	r4, r4, #1
   81e88:	429c      	cmp	r4, r3
   81e8a:	f63f aebd 	bhi.w	81c08 <_malloc_r+0x1d8>
   81e8e:	2c00      	cmp	r4, #0
   81e90:	f43f aeba 	beq.w	81c08 <_malloc_r+0x1d8>
   81e94:	421c      	tst	r4, r3
   81e96:	4640      	mov	r0, r8
   81e98:	f47f ae42 	bne.w	81b20 <_malloc_r+0xf0>
   81e9c:	0064      	lsls	r4, r4, #1
   81e9e:	421c      	tst	r4, r3
   81ea0:	f100 0004 	add.w	r0, r0, #4
   81ea4:	d0fa      	beq.n	81e9c <_malloc_r+0x46c>
   81ea6:	e63b      	b.n	81b20 <_malloc_r+0xf0>
   81ea8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81eac:	d818      	bhi.n	81ee0 <_malloc_r+0x4b0>
   81eae:	0be8      	lsrs	r0, r5, #15
   81eb0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   81eb4:	ea4f 014e 	mov.w	r1, lr, lsl #1
   81eb8:	3077      	adds	r0, #119	; 0x77
   81eba:	e5db      	b.n	81a74 <_malloc_r+0x44>
   81ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81ec0:	e6eb      	b.n	81c9a <_malloc_r+0x26a>
   81ec2:	2101      	movs	r1, #1
   81ec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81ec8:	1092      	asrs	r2, r2, #2
   81eca:	fa01 f202 	lsl.w	r2, r1, r2
   81ece:	431a      	orrs	r2, r3
   81ed0:	f8c8 2004 	str.w	r2, [r8, #4]
   81ed4:	4661      	mov	r1, ip
   81ed6:	e777      	b.n	81dc8 <_malloc_r+0x398>
   81ed8:	2301      	movs	r3, #1
   81eda:	f8cb 3004 	str.w	r3, [fp, #4]
   81ede:	e725      	b.n	81d2c <_malloc_r+0x2fc>
   81ee0:	f240 5254 	movw	r2, #1364	; 0x554
   81ee4:	4293      	cmp	r3, r2
   81ee6:	d820      	bhi.n	81f2a <_malloc_r+0x4fa>
   81ee8:	0ca8      	lsrs	r0, r5, #18
   81eea:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   81eee:	ea4f 014e 	mov.w	r1, lr, lsl #1
   81ef2:	307c      	adds	r0, #124	; 0x7c
   81ef4:	e5be      	b.n	81a74 <_malloc_r+0x44>
   81ef6:	3210      	adds	r2, #16
   81ef8:	e6a4      	b.n	81c44 <_malloc_r+0x214>
   81efa:	2a54      	cmp	r2, #84	; 0x54
   81efc:	d826      	bhi.n	81f4c <_malloc_r+0x51c>
   81efe:	0b1a      	lsrs	r2, r3, #12
   81f00:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81f04:	0049      	lsls	r1, r1, #1
   81f06:	326e      	adds	r2, #110	; 0x6e
   81f08:	e748      	b.n	81d9c <_malloc_r+0x36c>
   81f0a:	68bc      	ldr	r4, [r7, #8]
   81f0c:	6862      	ldr	r2, [r4, #4]
   81f0e:	f022 0203 	bic.w	r2, r2, #3
   81f12:	e705      	b.n	81d20 <_malloc_r+0x2f0>
   81f14:	f3ca 000b 	ubfx	r0, sl, #0, #12
   81f18:	2800      	cmp	r0, #0
   81f1a:	f47f aea8 	bne.w	81c6e <_malloc_r+0x23e>
   81f1e:	4442      	add	r2, r8
   81f20:	68bb      	ldr	r3, [r7, #8]
   81f22:	f042 0201 	orr.w	r2, r2, #1
   81f26:	605a      	str	r2, [r3, #4]
   81f28:	e6ec      	b.n	81d04 <_malloc_r+0x2d4>
   81f2a:	21fe      	movs	r1, #254	; 0xfe
   81f2c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   81f30:	207e      	movs	r0, #126	; 0x7e
   81f32:	e59f      	b.n	81a74 <_malloc_r+0x44>
   81f34:	2201      	movs	r2, #1
   81f36:	f04f 0900 	mov.w	r9, #0
   81f3a:	e6c1      	b.n	81cc0 <_malloc_r+0x290>
   81f3c:	f104 0108 	add.w	r1, r4, #8
   81f40:	4630      	mov	r0, r6
   81f42:	f7ff fa65 	bl	81410 <_free_r>
   81f46:	f8d9 1000 	ldr.w	r1, [r9]
   81f4a:	e6db      	b.n	81d04 <_malloc_r+0x2d4>
   81f4c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81f50:	d805      	bhi.n	81f5e <_malloc_r+0x52e>
   81f52:	0bda      	lsrs	r2, r3, #15
   81f54:	f102 0178 	add.w	r1, r2, #120	; 0x78
   81f58:	0049      	lsls	r1, r1, #1
   81f5a:	3277      	adds	r2, #119	; 0x77
   81f5c:	e71e      	b.n	81d9c <_malloc_r+0x36c>
   81f5e:	f240 5154 	movw	r1, #1364	; 0x554
   81f62:	428a      	cmp	r2, r1
   81f64:	d805      	bhi.n	81f72 <_malloc_r+0x542>
   81f66:	0c9a      	lsrs	r2, r3, #18
   81f68:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81f6c:	0049      	lsls	r1, r1, #1
   81f6e:	327c      	adds	r2, #124	; 0x7c
   81f70:	e714      	b.n	81d9c <_malloc_r+0x36c>
   81f72:	21fe      	movs	r1, #254	; 0xfe
   81f74:	227e      	movs	r2, #126	; 0x7e
   81f76:	e711      	b.n	81d9c <_malloc_r+0x36c>
   81f78:	687b      	ldr	r3, [r7, #4]
   81f7a:	e784      	b.n	81e86 <_malloc_r+0x456>
   81f7c:	08e8      	lsrs	r0, r5, #3
   81f7e:	1c43      	adds	r3, r0, #1
   81f80:	005b      	lsls	r3, r3, #1
   81f82:	e605      	b.n	81b90 <_malloc_r+0x160>
   81f84:	2007055c 	.word	0x2007055c

00081f88 <memchr>:
   81f88:	0783      	lsls	r3, r0, #30
   81f8a:	b470      	push	{r4, r5, r6}
   81f8c:	b2cd      	uxtb	r5, r1
   81f8e:	d03d      	beq.n	8200c <memchr+0x84>
   81f90:	1e53      	subs	r3, r2, #1
   81f92:	b302      	cbz	r2, 81fd6 <memchr+0x4e>
   81f94:	7802      	ldrb	r2, [r0, #0]
   81f96:	42aa      	cmp	r2, r5
   81f98:	d01e      	beq.n	81fd8 <memchr+0x50>
   81f9a:	1c42      	adds	r2, r0, #1
   81f9c:	e004      	b.n	81fa8 <memchr+0x20>
   81f9e:	b1d3      	cbz	r3, 81fd6 <memchr+0x4e>
   81fa0:	7804      	ldrb	r4, [r0, #0]
   81fa2:	3b01      	subs	r3, #1
   81fa4:	42ac      	cmp	r4, r5
   81fa6:	d017      	beq.n	81fd8 <memchr+0x50>
   81fa8:	f012 0f03 	tst.w	r2, #3
   81fac:	4610      	mov	r0, r2
   81fae:	f102 0201 	add.w	r2, r2, #1
   81fb2:	d1f4      	bne.n	81f9e <memchr+0x16>
   81fb4:	2b03      	cmp	r3, #3
   81fb6:	d811      	bhi.n	81fdc <memchr+0x54>
   81fb8:	b353      	cbz	r3, 82010 <memchr+0x88>
   81fba:	7802      	ldrb	r2, [r0, #0]
   81fbc:	42aa      	cmp	r2, r5
   81fbe:	d00b      	beq.n	81fd8 <memchr+0x50>
   81fc0:	4403      	add	r3, r0
   81fc2:	1c42      	adds	r2, r0, #1
   81fc4:	e002      	b.n	81fcc <memchr+0x44>
   81fc6:	7801      	ldrb	r1, [r0, #0]
   81fc8:	42a9      	cmp	r1, r5
   81fca:	d005      	beq.n	81fd8 <memchr+0x50>
   81fcc:	4293      	cmp	r3, r2
   81fce:	4610      	mov	r0, r2
   81fd0:	f102 0201 	add.w	r2, r2, #1
   81fd4:	d1f7      	bne.n	81fc6 <memchr+0x3e>
   81fd6:	2000      	movs	r0, #0
   81fd8:	bc70      	pop	{r4, r5, r6}
   81fda:	4770      	bx	lr
   81fdc:	4604      	mov	r4, r0
   81fde:	020e      	lsls	r6, r1, #8
   81fe0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   81fe4:	432e      	orrs	r6, r5
   81fe6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   81fea:	6822      	ldr	r2, [r4, #0]
   81fec:	4620      	mov	r0, r4
   81fee:	4072      	eors	r2, r6
   81ff0:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   81ff4:	ea21 0202 	bic.w	r2, r1, r2
   81ff8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   81ffc:	f104 0404 	add.w	r4, r4, #4
   82000:	d1db      	bne.n	81fba <memchr+0x32>
   82002:	3b04      	subs	r3, #4
   82004:	2b03      	cmp	r3, #3
   82006:	4620      	mov	r0, r4
   82008:	d8ef      	bhi.n	81fea <memchr+0x62>
   8200a:	e7d5      	b.n	81fb8 <memchr+0x30>
   8200c:	4613      	mov	r3, r2
   8200e:	e7d1      	b.n	81fb4 <memchr+0x2c>
   82010:	4618      	mov	r0, r3
   82012:	e7e1      	b.n	81fd8 <memchr+0x50>

00082014 <memcpy>:
   82014:	4684      	mov	ip, r0
   82016:	ea41 0300 	orr.w	r3, r1, r0
   8201a:	f013 0303 	ands.w	r3, r3, #3
   8201e:	d149      	bne.n	820b4 <memcpy+0xa0>
   82020:	3a40      	subs	r2, #64	; 0x40
   82022:	d323      	bcc.n	8206c <memcpy+0x58>
   82024:	680b      	ldr	r3, [r1, #0]
   82026:	6003      	str	r3, [r0, #0]
   82028:	684b      	ldr	r3, [r1, #4]
   8202a:	6043      	str	r3, [r0, #4]
   8202c:	688b      	ldr	r3, [r1, #8]
   8202e:	6083      	str	r3, [r0, #8]
   82030:	68cb      	ldr	r3, [r1, #12]
   82032:	60c3      	str	r3, [r0, #12]
   82034:	690b      	ldr	r3, [r1, #16]
   82036:	6103      	str	r3, [r0, #16]
   82038:	694b      	ldr	r3, [r1, #20]
   8203a:	6143      	str	r3, [r0, #20]
   8203c:	698b      	ldr	r3, [r1, #24]
   8203e:	6183      	str	r3, [r0, #24]
   82040:	69cb      	ldr	r3, [r1, #28]
   82042:	61c3      	str	r3, [r0, #28]
   82044:	6a0b      	ldr	r3, [r1, #32]
   82046:	6203      	str	r3, [r0, #32]
   82048:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8204a:	6243      	str	r3, [r0, #36]	; 0x24
   8204c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8204e:	6283      	str	r3, [r0, #40]	; 0x28
   82050:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82052:	62c3      	str	r3, [r0, #44]	; 0x2c
   82054:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82056:	6303      	str	r3, [r0, #48]	; 0x30
   82058:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8205a:	6343      	str	r3, [r0, #52]	; 0x34
   8205c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8205e:	6383      	str	r3, [r0, #56]	; 0x38
   82060:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82062:	63c3      	str	r3, [r0, #60]	; 0x3c
   82064:	3040      	adds	r0, #64	; 0x40
   82066:	3140      	adds	r1, #64	; 0x40
   82068:	3a40      	subs	r2, #64	; 0x40
   8206a:	d2db      	bcs.n	82024 <memcpy+0x10>
   8206c:	3230      	adds	r2, #48	; 0x30
   8206e:	d30b      	bcc.n	82088 <memcpy+0x74>
   82070:	680b      	ldr	r3, [r1, #0]
   82072:	6003      	str	r3, [r0, #0]
   82074:	684b      	ldr	r3, [r1, #4]
   82076:	6043      	str	r3, [r0, #4]
   82078:	688b      	ldr	r3, [r1, #8]
   8207a:	6083      	str	r3, [r0, #8]
   8207c:	68cb      	ldr	r3, [r1, #12]
   8207e:	60c3      	str	r3, [r0, #12]
   82080:	3010      	adds	r0, #16
   82082:	3110      	adds	r1, #16
   82084:	3a10      	subs	r2, #16
   82086:	d2f3      	bcs.n	82070 <memcpy+0x5c>
   82088:	320c      	adds	r2, #12
   8208a:	d305      	bcc.n	82098 <memcpy+0x84>
   8208c:	f851 3b04 	ldr.w	r3, [r1], #4
   82090:	f840 3b04 	str.w	r3, [r0], #4
   82094:	3a04      	subs	r2, #4
   82096:	d2f9      	bcs.n	8208c <memcpy+0x78>
   82098:	3204      	adds	r2, #4
   8209a:	d008      	beq.n	820ae <memcpy+0x9a>
   8209c:	07d2      	lsls	r2, r2, #31
   8209e:	bf1c      	itt	ne
   820a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820a4:	f800 3b01 	strbne.w	r3, [r0], #1
   820a8:	d301      	bcc.n	820ae <memcpy+0x9a>
   820aa:	880b      	ldrh	r3, [r1, #0]
   820ac:	8003      	strh	r3, [r0, #0]
   820ae:	4660      	mov	r0, ip
   820b0:	4770      	bx	lr
   820b2:	bf00      	nop
   820b4:	2a08      	cmp	r2, #8
   820b6:	d313      	bcc.n	820e0 <memcpy+0xcc>
   820b8:	078b      	lsls	r3, r1, #30
   820ba:	d0b1      	beq.n	82020 <memcpy+0xc>
   820bc:	f010 0303 	ands.w	r3, r0, #3
   820c0:	d0ae      	beq.n	82020 <memcpy+0xc>
   820c2:	f1c3 0304 	rsb	r3, r3, #4
   820c6:	1ad2      	subs	r2, r2, r3
   820c8:	07db      	lsls	r3, r3, #31
   820ca:	bf1c      	itt	ne
   820cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   820d0:	f800 3b01 	strbne.w	r3, [r0], #1
   820d4:	d3a4      	bcc.n	82020 <memcpy+0xc>
   820d6:	f831 3b02 	ldrh.w	r3, [r1], #2
   820da:	f820 3b02 	strh.w	r3, [r0], #2
   820de:	e79f      	b.n	82020 <memcpy+0xc>
   820e0:	3a04      	subs	r2, #4
   820e2:	d3d9      	bcc.n	82098 <memcpy+0x84>
   820e4:	3a01      	subs	r2, #1
   820e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   820ea:	f800 3b01 	strb.w	r3, [r0], #1
   820ee:	d2f9      	bcs.n	820e4 <memcpy+0xd0>
   820f0:	780b      	ldrb	r3, [r1, #0]
   820f2:	7003      	strb	r3, [r0, #0]
   820f4:	784b      	ldrb	r3, [r1, #1]
   820f6:	7043      	strb	r3, [r0, #1]
   820f8:	788b      	ldrb	r3, [r1, #2]
   820fa:	7083      	strb	r3, [r0, #2]
   820fc:	4660      	mov	r0, ip
   820fe:	4770      	bx	lr

00082100 <memmove>:
   82100:	4288      	cmp	r0, r1
   82102:	b5f0      	push	{r4, r5, r6, r7, lr}
   82104:	d90d      	bls.n	82122 <memmove+0x22>
   82106:	188b      	adds	r3, r1, r2
   82108:	4298      	cmp	r0, r3
   8210a:	d20a      	bcs.n	82122 <memmove+0x22>
   8210c:	1881      	adds	r1, r0, r2
   8210e:	2a00      	cmp	r2, #0
   82110:	d051      	beq.n	821b6 <memmove+0xb6>
   82112:	1a9a      	subs	r2, r3, r2
   82114:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82118:	4293      	cmp	r3, r2
   8211a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8211e:	d1f9      	bne.n	82114 <memmove+0x14>
   82120:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82122:	2a0f      	cmp	r2, #15
   82124:	d948      	bls.n	821b8 <memmove+0xb8>
   82126:	ea41 0300 	orr.w	r3, r1, r0
   8212a:	079b      	lsls	r3, r3, #30
   8212c:	d146      	bne.n	821bc <memmove+0xbc>
   8212e:	4615      	mov	r5, r2
   82130:	f100 0410 	add.w	r4, r0, #16
   82134:	f101 0310 	add.w	r3, r1, #16
   82138:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8213c:	3d10      	subs	r5, #16
   8213e:	f844 6c10 	str.w	r6, [r4, #-16]
   82142:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   82146:	2d0f      	cmp	r5, #15
   82148:	f844 6c0c 	str.w	r6, [r4, #-12]
   8214c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82150:	f104 0410 	add.w	r4, r4, #16
   82154:	f844 6c18 	str.w	r6, [r4, #-24]
   82158:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8215c:	f103 0310 	add.w	r3, r3, #16
   82160:	f844 6c14 	str.w	r6, [r4, #-20]
   82164:	d8e8      	bhi.n	82138 <memmove+0x38>
   82166:	f1a2 0310 	sub.w	r3, r2, #16
   8216a:	f023 030f 	bic.w	r3, r3, #15
   8216e:	f002 0e0f 	and.w	lr, r2, #15
   82172:	3310      	adds	r3, #16
   82174:	f1be 0f03 	cmp.w	lr, #3
   82178:	4419      	add	r1, r3
   8217a:	4403      	add	r3, r0
   8217c:	d921      	bls.n	821c2 <memmove+0xc2>
   8217e:	460e      	mov	r6, r1
   82180:	4674      	mov	r4, lr
   82182:	1f1d      	subs	r5, r3, #4
   82184:	f856 7b04 	ldr.w	r7, [r6], #4
   82188:	3c04      	subs	r4, #4
   8218a:	2c03      	cmp	r4, #3
   8218c:	f845 7f04 	str.w	r7, [r5, #4]!
   82190:	d8f8      	bhi.n	82184 <memmove+0x84>
   82192:	f1ae 0404 	sub.w	r4, lr, #4
   82196:	f024 0403 	bic.w	r4, r4, #3
   8219a:	3404      	adds	r4, #4
   8219c:	4423      	add	r3, r4
   8219e:	4421      	add	r1, r4
   821a0:	f002 0203 	and.w	r2, r2, #3
   821a4:	b162      	cbz	r2, 821c0 <memmove+0xc0>
   821a6:	3b01      	subs	r3, #1
   821a8:	440a      	add	r2, r1
   821aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   821ae:	428a      	cmp	r2, r1
   821b0:	f803 4f01 	strb.w	r4, [r3, #1]!
   821b4:	d1f9      	bne.n	821aa <memmove+0xaa>
   821b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   821b8:	4603      	mov	r3, r0
   821ba:	e7f3      	b.n	821a4 <memmove+0xa4>
   821bc:	4603      	mov	r3, r0
   821be:	e7f2      	b.n	821a6 <memmove+0xa6>
   821c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   821c2:	4672      	mov	r2, lr
   821c4:	e7ee      	b.n	821a4 <memmove+0xa4>
   821c6:	bf00      	nop

000821c8 <__malloc_lock>:
   821c8:	4770      	bx	lr
   821ca:	bf00      	nop

000821cc <__malloc_unlock>:
   821cc:	4770      	bx	lr
   821ce:	bf00      	nop

000821d0 <_realloc_r>:
   821d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821d4:	4617      	mov	r7, r2
   821d6:	b083      	sub	sp, #12
   821d8:	2900      	cmp	r1, #0
   821da:	f000 808f 	beq.w	822fc <_realloc_r+0x12c>
   821de:	460d      	mov	r5, r1
   821e0:	4681      	mov	r9, r0
   821e2:	f107 040b 	add.w	r4, r7, #11
   821e6:	f7ff ffef 	bl	821c8 <__malloc_lock>
   821ea:	f855 ec04 	ldr.w	lr, [r5, #-4]
   821ee:	2c16      	cmp	r4, #22
   821f0:	f02e 0603 	bic.w	r6, lr, #3
   821f4:	f1a5 0808 	sub.w	r8, r5, #8
   821f8:	d83c      	bhi.n	82274 <_realloc_r+0xa4>
   821fa:	2210      	movs	r2, #16
   821fc:	4614      	mov	r4, r2
   821fe:	42a7      	cmp	r7, r4
   82200:	d83d      	bhi.n	8227e <_realloc_r+0xae>
   82202:	4296      	cmp	r6, r2
   82204:	da42      	bge.n	8228c <_realloc_r+0xbc>
   82206:	4bc6      	ldr	r3, [pc, #792]	; (82520 <_realloc_r+0x350>)
   82208:	eb08 0006 	add.w	r0, r8, r6
   8220c:	6899      	ldr	r1, [r3, #8]
   8220e:	4288      	cmp	r0, r1
   82210:	6841      	ldr	r1, [r0, #4]
   82212:	f000 80d7 	beq.w	823c4 <_realloc_r+0x1f4>
   82216:	f021 0301 	bic.w	r3, r1, #1
   8221a:	4403      	add	r3, r0
   8221c:	685b      	ldr	r3, [r3, #4]
   8221e:	07db      	lsls	r3, r3, #31
   82220:	d54c      	bpl.n	822bc <_realloc_r+0xec>
   82222:	f01e 0f01 	tst.w	lr, #1
   82226:	f000 809d 	beq.w	82364 <_realloc_r+0x194>
   8222a:	4639      	mov	r1, r7
   8222c:	4648      	mov	r0, r9
   8222e:	f7ff fbff 	bl	81a30 <_malloc_r>
   82232:	4607      	mov	r7, r0
   82234:	2800      	cmp	r0, #0
   82236:	d03a      	beq.n	822ae <_realloc_r+0xde>
   82238:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8223c:	f1a0 0208 	sub.w	r2, r0, #8
   82240:	f023 0301 	bic.w	r3, r3, #1
   82244:	4443      	add	r3, r8
   82246:	429a      	cmp	r2, r3
   82248:	f000 813e 	beq.w	824c8 <_realloc_r+0x2f8>
   8224c:	1f32      	subs	r2, r6, #4
   8224e:	2a24      	cmp	r2, #36	; 0x24
   82250:	f200 812b 	bhi.w	824aa <_realloc_r+0x2da>
   82254:	2a13      	cmp	r2, #19
   82256:	f200 80ff 	bhi.w	82458 <_realloc_r+0x288>
   8225a:	4603      	mov	r3, r0
   8225c:	462a      	mov	r2, r5
   8225e:	6811      	ldr	r1, [r2, #0]
   82260:	6019      	str	r1, [r3, #0]
   82262:	6851      	ldr	r1, [r2, #4]
   82264:	6059      	str	r1, [r3, #4]
   82266:	6892      	ldr	r2, [r2, #8]
   82268:	609a      	str	r2, [r3, #8]
   8226a:	4629      	mov	r1, r5
   8226c:	4648      	mov	r0, r9
   8226e:	f7ff f8cf 	bl	81410 <_free_r>
   82272:	e01c      	b.n	822ae <_realloc_r+0xde>
   82274:	f024 0407 	bic.w	r4, r4, #7
   82278:	2c00      	cmp	r4, #0
   8227a:	4622      	mov	r2, r4
   8227c:	dabf      	bge.n	821fe <_realloc_r+0x2e>
   8227e:	230c      	movs	r3, #12
   82280:	2000      	movs	r0, #0
   82282:	f8c9 3000 	str.w	r3, [r9]
   82286:	b003      	add	sp, #12
   82288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8228c:	462f      	mov	r7, r5
   8228e:	1b33      	subs	r3, r6, r4
   82290:	2b0f      	cmp	r3, #15
   82292:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82296:	d81d      	bhi.n	822d4 <_realloc_r+0x104>
   82298:	f002 0201 	and.w	r2, r2, #1
   8229c:	4332      	orrs	r2, r6
   8229e:	eb08 0106 	add.w	r1, r8, r6
   822a2:	f8c8 2004 	str.w	r2, [r8, #4]
   822a6:	684b      	ldr	r3, [r1, #4]
   822a8:	f043 0301 	orr.w	r3, r3, #1
   822ac:	604b      	str	r3, [r1, #4]
   822ae:	4648      	mov	r0, r9
   822b0:	f7ff ff8c 	bl	821cc <__malloc_unlock>
   822b4:	4638      	mov	r0, r7
   822b6:	b003      	add	sp, #12
   822b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822bc:	f021 0103 	bic.w	r1, r1, #3
   822c0:	4431      	add	r1, r6
   822c2:	4291      	cmp	r1, r2
   822c4:	db20      	blt.n	82308 <_realloc_r+0x138>
   822c6:	68c3      	ldr	r3, [r0, #12]
   822c8:	6882      	ldr	r2, [r0, #8]
   822ca:	462f      	mov	r7, r5
   822cc:	60d3      	str	r3, [r2, #12]
   822ce:	460e      	mov	r6, r1
   822d0:	609a      	str	r2, [r3, #8]
   822d2:	e7dc      	b.n	8228e <_realloc_r+0xbe>
   822d4:	f002 0201 	and.w	r2, r2, #1
   822d8:	eb08 0104 	add.w	r1, r8, r4
   822dc:	4314      	orrs	r4, r2
   822de:	f043 0201 	orr.w	r2, r3, #1
   822e2:	f8c8 4004 	str.w	r4, [r8, #4]
   822e6:	440b      	add	r3, r1
   822e8:	604a      	str	r2, [r1, #4]
   822ea:	685a      	ldr	r2, [r3, #4]
   822ec:	3108      	adds	r1, #8
   822ee:	f042 0201 	orr.w	r2, r2, #1
   822f2:	605a      	str	r2, [r3, #4]
   822f4:	4648      	mov	r0, r9
   822f6:	f7ff f88b 	bl	81410 <_free_r>
   822fa:	e7d8      	b.n	822ae <_realloc_r+0xde>
   822fc:	4611      	mov	r1, r2
   822fe:	b003      	add	sp, #12
   82300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82304:	f7ff bb94 	b.w	81a30 <_malloc_r>
   82308:	f01e 0f01 	tst.w	lr, #1
   8230c:	d18d      	bne.n	8222a <_realloc_r+0x5a>
   8230e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82312:	ebc3 0a08 	rsb	sl, r3, r8
   82316:	f8da 3004 	ldr.w	r3, [sl, #4]
   8231a:	f023 0c03 	bic.w	ip, r3, #3
   8231e:	eb01 0e0c 	add.w	lr, r1, ip
   82322:	4596      	cmp	lr, r2
   82324:	db26      	blt.n	82374 <_realloc_r+0x1a4>
   82326:	4657      	mov	r7, sl
   82328:	68c3      	ldr	r3, [r0, #12]
   8232a:	6881      	ldr	r1, [r0, #8]
   8232c:	1f32      	subs	r2, r6, #4
   8232e:	60cb      	str	r3, [r1, #12]
   82330:	6099      	str	r1, [r3, #8]
   82332:	f857 1f08 	ldr.w	r1, [r7, #8]!
   82336:	f8da 300c 	ldr.w	r3, [sl, #12]
   8233a:	2a24      	cmp	r2, #36	; 0x24
   8233c:	60cb      	str	r3, [r1, #12]
   8233e:	6099      	str	r1, [r3, #8]
   82340:	f200 80c9 	bhi.w	824d6 <_realloc_r+0x306>
   82344:	2a13      	cmp	r2, #19
   82346:	f240 8092 	bls.w	8246e <_realloc_r+0x29e>
   8234a:	682b      	ldr	r3, [r5, #0]
   8234c:	2a1b      	cmp	r2, #27
   8234e:	f8ca 3008 	str.w	r3, [sl, #8]
   82352:	686b      	ldr	r3, [r5, #4]
   82354:	f8ca 300c 	str.w	r3, [sl, #12]
   82358:	f200 80cd 	bhi.w	824f6 <_realloc_r+0x326>
   8235c:	3508      	adds	r5, #8
   8235e:	f10a 0310 	add.w	r3, sl, #16
   82362:	e085      	b.n	82470 <_realloc_r+0x2a0>
   82364:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82368:	ebc3 0a08 	rsb	sl, r3, r8
   8236c:	f8da 3004 	ldr.w	r3, [sl, #4]
   82370:	f023 0c03 	bic.w	ip, r3, #3
   82374:	eb06 030c 	add.w	r3, r6, ip
   82378:	4293      	cmp	r3, r2
   8237a:	f6ff af56 	blt.w	8222a <_realloc_r+0x5a>
   8237e:	4657      	mov	r7, sl
   82380:	f8da 100c 	ldr.w	r1, [sl, #12]
   82384:	f857 0f08 	ldr.w	r0, [r7, #8]!
   82388:	1f32      	subs	r2, r6, #4
   8238a:	2a24      	cmp	r2, #36	; 0x24
   8238c:	60c1      	str	r1, [r0, #12]
   8238e:	6088      	str	r0, [r1, #8]
   82390:	f200 80aa 	bhi.w	824e8 <_realloc_r+0x318>
   82394:	2a13      	cmp	r2, #19
   82396:	f240 80a5 	bls.w	824e4 <_realloc_r+0x314>
   8239a:	6829      	ldr	r1, [r5, #0]
   8239c:	2a1b      	cmp	r2, #27
   8239e:	f8ca 1008 	str.w	r1, [sl, #8]
   823a2:	6869      	ldr	r1, [r5, #4]
   823a4:	f8ca 100c 	str.w	r1, [sl, #12]
   823a8:	f200 80bc 	bhi.w	82524 <_realloc_r+0x354>
   823ac:	3508      	adds	r5, #8
   823ae:	f10a 0210 	add.w	r2, sl, #16
   823b2:	6829      	ldr	r1, [r5, #0]
   823b4:	461e      	mov	r6, r3
   823b6:	6011      	str	r1, [r2, #0]
   823b8:	6869      	ldr	r1, [r5, #4]
   823ba:	46d0      	mov	r8, sl
   823bc:	6051      	str	r1, [r2, #4]
   823be:	68ab      	ldr	r3, [r5, #8]
   823c0:	6093      	str	r3, [r2, #8]
   823c2:	e764      	b.n	8228e <_realloc_r+0xbe>
   823c4:	f021 0b03 	bic.w	fp, r1, #3
   823c8:	f104 0010 	add.w	r0, r4, #16
   823cc:	44b3      	add	fp, r6
   823ce:	4583      	cmp	fp, r0
   823d0:	da57      	bge.n	82482 <_realloc_r+0x2b2>
   823d2:	f01e 0f01 	tst.w	lr, #1
   823d6:	f47f af28 	bne.w	8222a <_realloc_r+0x5a>
   823da:	f855 1c08 	ldr.w	r1, [r5, #-8]
   823de:	ebc1 0a08 	rsb	sl, r1, r8
   823e2:	f8da 1004 	ldr.w	r1, [sl, #4]
   823e6:	f021 0c03 	bic.w	ip, r1, #3
   823ea:	44e3      	add	fp, ip
   823ec:	4558      	cmp	r0, fp
   823ee:	dcc1      	bgt.n	82374 <_realloc_r+0x1a4>
   823f0:	4657      	mov	r7, sl
   823f2:	f8da 100c 	ldr.w	r1, [sl, #12]
   823f6:	f857 0f08 	ldr.w	r0, [r7, #8]!
   823fa:	1f32      	subs	r2, r6, #4
   823fc:	2a24      	cmp	r2, #36	; 0x24
   823fe:	60c1      	str	r1, [r0, #12]
   82400:	6088      	str	r0, [r1, #8]
   82402:	f200 80b1 	bhi.w	82568 <_realloc_r+0x398>
   82406:	2a13      	cmp	r2, #19
   82408:	f240 80a2 	bls.w	82550 <_realloc_r+0x380>
   8240c:	6829      	ldr	r1, [r5, #0]
   8240e:	2a1b      	cmp	r2, #27
   82410:	f8ca 1008 	str.w	r1, [sl, #8]
   82414:	6869      	ldr	r1, [r5, #4]
   82416:	f8ca 100c 	str.w	r1, [sl, #12]
   8241a:	f200 80ac 	bhi.w	82576 <_realloc_r+0x3a6>
   8241e:	3508      	adds	r5, #8
   82420:	f10a 0210 	add.w	r2, sl, #16
   82424:	6829      	ldr	r1, [r5, #0]
   82426:	6011      	str	r1, [r2, #0]
   82428:	6869      	ldr	r1, [r5, #4]
   8242a:	6051      	str	r1, [r2, #4]
   8242c:	68a9      	ldr	r1, [r5, #8]
   8242e:	6091      	str	r1, [r2, #8]
   82430:	ebc4 020b 	rsb	r2, r4, fp
   82434:	eb0a 0104 	add.w	r1, sl, r4
   82438:	f042 0201 	orr.w	r2, r2, #1
   8243c:	6099      	str	r1, [r3, #8]
   8243e:	604a      	str	r2, [r1, #4]
   82440:	f8da 3004 	ldr.w	r3, [sl, #4]
   82444:	4648      	mov	r0, r9
   82446:	f003 0301 	and.w	r3, r3, #1
   8244a:	431c      	orrs	r4, r3
   8244c:	f8ca 4004 	str.w	r4, [sl, #4]
   82450:	f7ff febc 	bl	821cc <__malloc_unlock>
   82454:	4638      	mov	r0, r7
   82456:	e72e      	b.n	822b6 <_realloc_r+0xe6>
   82458:	682b      	ldr	r3, [r5, #0]
   8245a:	2a1b      	cmp	r2, #27
   8245c:	6003      	str	r3, [r0, #0]
   8245e:	686b      	ldr	r3, [r5, #4]
   82460:	6043      	str	r3, [r0, #4]
   82462:	d826      	bhi.n	824b2 <_realloc_r+0x2e2>
   82464:	f100 0308 	add.w	r3, r0, #8
   82468:	f105 0208 	add.w	r2, r5, #8
   8246c:	e6f7      	b.n	8225e <_realloc_r+0x8e>
   8246e:	463b      	mov	r3, r7
   82470:	682a      	ldr	r2, [r5, #0]
   82472:	4676      	mov	r6, lr
   82474:	601a      	str	r2, [r3, #0]
   82476:	686a      	ldr	r2, [r5, #4]
   82478:	46d0      	mov	r8, sl
   8247a:	605a      	str	r2, [r3, #4]
   8247c:	68aa      	ldr	r2, [r5, #8]
   8247e:	609a      	str	r2, [r3, #8]
   82480:	e705      	b.n	8228e <_realloc_r+0xbe>
   82482:	ebc4 0b0b 	rsb	fp, r4, fp
   82486:	eb08 0104 	add.w	r1, r8, r4
   8248a:	f04b 0201 	orr.w	r2, fp, #1
   8248e:	6099      	str	r1, [r3, #8]
   82490:	604a      	str	r2, [r1, #4]
   82492:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82496:	4648      	mov	r0, r9
   82498:	f003 0301 	and.w	r3, r3, #1
   8249c:	431c      	orrs	r4, r3
   8249e:	f845 4c04 	str.w	r4, [r5, #-4]
   824a2:	f7ff fe93 	bl	821cc <__malloc_unlock>
   824a6:	4628      	mov	r0, r5
   824a8:	e705      	b.n	822b6 <_realloc_r+0xe6>
   824aa:	4629      	mov	r1, r5
   824ac:	f7ff fe28 	bl	82100 <memmove>
   824b0:	e6db      	b.n	8226a <_realloc_r+0x9a>
   824b2:	68ab      	ldr	r3, [r5, #8]
   824b4:	2a24      	cmp	r2, #36	; 0x24
   824b6:	6083      	str	r3, [r0, #8]
   824b8:	68eb      	ldr	r3, [r5, #12]
   824ba:	60c3      	str	r3, [r0, #12]
   824bc:	d027      	beq.n	8250e <_realloc_r+0x33e>
   824be:	f100 0310 	add.w	r3, r0, #16
   824c2:	f105 0210 	add.w	r2, r5, #16
   824c6:	e6ca      	b.n	8225e <_realloc_r+0x8e>
   824c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   824cc:	462f      	mov	r7, r5
   824ce:	f023 0303 	bic.w	r3, r3, #3
   824d2:	441e      	add	r6, r3
   824d4:	e6db      	b.n	8228e <_realloc_r+0xbe>
   824d6:	4629      	mov	r1, r5
   824d8:	4638      	mov	r0, r7
   824da:	4676      	mov	r6, lr
   824dc:	46d0      	mov	r8, sl
   824de:	f7ff fe0f 	bl	82100 <memmove>
   824e2:	e6d4      	b.n	8228e <_realloc_r+0xbe>
   824e4:	463a      	mov	r2, r7
   824e6:	e764      	b.n	823b2 <_realloc_r+0x1e2>
   824e8:	4629      	mov	r1, r5
   824ea:	4638      	mov	r0, r7
   824ec:	461e      	mov	r6, r3
   824ee:	46d0      	mov	r8, sl
   824f0:	f7ff fe06 	bl	82100 <memmove>
   824f4:	e6cb      	b.n	8228e <_realloc_r+0xbe>
   824f6:	68ab      	ldr	r3, [r5, #8]
   824f8:	2a24      	cmp	r2, #36	; 0x24
   824fa:	f8ca 3010 	str.w	r3, [sl, #16]
   824fe:	68eb      	ldr	r3, [r5, #12]
   82500:	f8ca 3014 	str.w	r3, [sl, #20]
   82504:	d01a      	beq.n	8253c <_realloc_r+0x36c>
   82506:	3510      	adds	r5, #16
   82508:	f10a 0318 	add.w	r3, sl, #24
   8250c:	e7b0      	b.n	82470 <_realloc_r+0x2a0>
   8250e:	692a      	ldr	r2, [r5, #16]
   82510:	f100 0318 	add.w	r3, r0, #24
   82514:	6102      	str	r2, [r0, #16]
   82516:	6969      	ldr	r1, [r5, #20]
   82518:	f105 0218 	add.w	r2, r5, #24
   8251c:	6141      	str	r1, [r0, #20]
   8251e:	e69e      	b.n	8225e <_realloc_r+0x8e>
   82520:	2007055c 	.word	0x2007055c
   82524:	68a9      	ldr	r1, [r5, #8]
   82526:	2a24      	cmp	r2, #36	; 0x24
   82528:	f8ca 1010 	str.w	r1, [sl, #16]
   8252c:	68e9      	ldr	r1, [r5, #12]
   8252e:	f8ca 1014 	str.w	r1, [sl, #20]
   82532:	d00f      	beq.n	82554 <_realloc_r+0x384>
   82534:	3510      	adds	r5, #16
   82536:	f10a 0218 	add.w	r2, sl, #24
   8253a:	e73a      	b.n	823b2 <_realloc_r+0x1e2>
   8253c:	692a      	ldr	r2, [r5, #16]
   8253e:	f10a 0320 	add.w	r3, sl, #32
   82542:	f8ca 2018 	str.w	r2, [sl, #24]
   82546:	696a      	ldr	r2, [r5, #20]
   82548:	3518      	adds	r5, #24
   8254a:	f8ca 201c 	str.w	r2, [sl, #28]
   8254e:	e78f      	b.n	82470 <_realloc_r+0x2a0>
   82550:	463a      	mov	r2, r7
   82552:	e767      	b.n	82424 <_realloc_r+0x254>
   82554:	6929      	ldr	r1, [r5, #16]
   82556:	f10a 0220 	add.w	r2, sl, #32
   8255a:	f8ca 1018 	str.w	r1, [sl, #24]
   8255e:	6969      	ldr	r1, [r5, #20]
   82560:	3518      	adds	r5, #24
   82562:	f8ca 101c 	str.w	r1, [sl, #28]
   82566:	e724      	b.n	823b2 <_realloc_r+0x1e2>
   82568:	4629      	mov	r1, r5
   8256a:	4638      	mov	r0, r7
   8256c:	9301      	str	r3, [sp, #4]
   8256e:	f7ff fdc7 	bl	82100 <memmove>
   82572:	9b01      	ldr	r3, [sp, #4]
   82574:	e75c      	b.n	82430 <_realloc_r+0x260>
   82576:	68a9      	ldr	r1, [r5, #8]
   82578:	2a24      	cmp	r2, #36	; 0x24
   8257a:	f8ca 1010 	str.w	r1, [sl, #16]
   8257e:	68e9      	ldr	r1, [r5, #12]
   82580:	f8ca 1014 	str.w	r1, [sl, #20]
   82584:	d003      	beq.n	8258e <_realloc_r+0x3be>
   82586:	3510      	adds	r5, #16
   82588:	f10a 0218 	add.w	r2, sl, #24
   8258c:	e74a      	b.n	82424 <_realloc_r+0x254>
   8258e:	6929      	ldr	r1, [r5, #16]
   82590:	f10a 0220 	add.w	r2, sl, #32
   82594:	f8ca 1018 	str.w	r1, [sl, #24]
   82598:	6969      	ldr	r1, [r5, #20]
   8259a:	3518      	adds	r5, #24
   8259c:	f8ca 101c 	str.w	r1, [sl, #28]
   825a0:	e740      	b.n	82424 <_realloc_r+0x254>
   825a2:	bf00      	nop

000825a4 <_sbrk_r>:
   825a4:	b538      	push	{r3, r4, r5, lr}
   825a6:	4c07      	ldr	r4, [pc, #28]	; (825c4 <_sbrk_r+0x20>)
   825a8:	2300      	movs	r3, #0
   825aa:	4605      	mov	r5, r0
   825ac:	4608      	mov	r0, r1
   825ae:	6023      	str	r3, [r4, #0]
   825b0:	f7fe f9ac 	bl	8090c <_sbrk>
   825b4:	1c43      	adds	r3, r0, #1
   825b6:	d000      	beq.n	825ba <_sbrk_r+0x16>
   825b8:	bd38      	pop	{r3, r4, r5, pc}
   825ba:	6823      	ldr	r3, [r4, #0]
   825bc:	2b00      	cmp	r3, #0
   825be:	d0fb      	beq.n	825b8 <_sbrk_r+0x14>
   825c0:	602b      	str	r3, [r5, #0]
   825c2:	bd38      	pop	{r3, r4, r5, pc}
   825c4:	20070a3c 	.word	0x20070a3c

000825c8 <__sread>:
   825c8:	b510      	push	{r4, lr}
   825ca:	460c      	mov	r4, r1
   825cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   825d0:	f000 f936 	bl	82840 <_read_r>
   825d4:	2800      	cmp	r0, #0
   825d6:	db03      	blt.n	825e0 <__sread+0x18>
   825d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   825da:	4403      	add	r3, r0
   825dc:	6523      	str	r3, [r4, #80]	; 0x50
   825de:	bd10      	pop	{r4, pc}
   825e0:	89a3      	ldrh	r3, [r4, #12]
   825e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   825e6:	81a3      	strh	r3, [r4, #12]
   825e8:	bd10      	pop	{r4, pc}
   825ea:	bf00      	nop

000825ec <__swrite>:
   825ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825f0:	460c      	mov	r4, r1
   825f2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   825f6:	461f      	mov	r7, r3
   825f8:	05cb      	lsls	r3, r1, #23
   825fa:	4616      	mov	r6, r2
   825fc:	4605      	mov	r5, r0
   825fe:	d507      	bpl.n	82610 <__swrite+0x24>
   82600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82604:	2302      	movs	r3, #2
   82606:	2200      	movs	r2, #0
   82608:	f000 f904 	bl	82814 <_lseek_r>
   8260c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   82610:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82614:	81a1      	strh	r1, [r4, #12]
   82616:	463b      	mov	r3, r7
   82618:	4632      	mov	r2, r6
   8261a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8261e:	4628      	mov	r0, r5
   82620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82624:	f000 b814 	b.w	82650 <_write_r>

00082628 <__sseek>:
   82628:	b510      	push	{r4, lr}
   8262a:	460c      	mov	r4, r1
   8262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82630:	f000 f8f0 	bl	82814 <_lseek_r>
   82634:	89a3      	ldrh	r3, [r4, #12]
   82636:	1c42      	adds	r2, r0, #1
   82638:	bf0e      	itee	eq
   8263a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8263e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82642:	6520      	strne	r0, [r4, #80]	; 0x50
   82644:	81a3      	strh	r3, [r4, #12]
   82646:	bd10      	pop	{r4, pc}

00082648 <__sclose>:
   82648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8264c:	f000 b868 	b.w	82720 <_close_r>

00082650 <_write_r>:
   82650:	b570      	push	{r4, r5, r6, lr}
   82652:	460d      	mov	r5, r1
   82654:	4c08      	ldr	r4, [pc, #32]	; (82678 <_write_r+0x28>)
   82656:	4611      	mov	r1, r2
   82658:	4606      	mov	r6, r0
   8265a:	461a      	mov	r2, r3
   8265c:	4628      	mov	r0, r5
   8265e:	2300      	movs	r3, #0
   82660:	6023      	str	r3, [r4, #0]
   82662:	f7fd fd93 	bl	8018c <_write>
   82666:	1c43      	adds	r3, r0, #1
   82668:	d000      	beq.n	8266c <_write_r+0x1c>
   8266a:	bd70      	pop	{r4, r5, r6, pc}
   8266c:	6823      	ldr	r3, [r4, #0]
   8266e:	2b00      	cmp	r3, #0
   82670:	d0fb      	beq.n	8266a <_write_r+0x1a>
   82672:	6033      	str	r3, [r6, #0]
   82674:	bd70      	pop	{r4, r5, r6, pc}
   82676:	bf00      	nop
   82678:	20070a3c 	.word	0x20070a3c

0008267c <__register_exitproc>:
   8267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82680:	4c25      	ldr	r4, [pc, #148]	; (82718 <__register_exitproc+0x9c>)
   82682:	4606      	mov	r6, r0
   82684:	6825      	ldr	r5, [r4, #0]
   82686:	4688      	mov	r8, r1
   82688:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   8268c:	4692      	mov	sl, r2
   8268e:	4699      	mov	r9, r3
   82690:	b3c4      	cbz	r4, 82704 <__register_exitproc+0x88>
   82692:	6860      	ldr	r0, [r4, #4]
   82694:	281f      	cmp	r0, #31
   82696:	dc17      	bgt.n	826c8 <__register_exitproc+0x4c>
   82698:	1c41      	adds	r1, r0, #1
   8269a:	b176      	cbz	r6, 826ba <__register_exitproc+0x3e>
   8269c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   826a0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   826a4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   826a8:	2201      	movs	r2, #1
   826aa:	4082      	lsls	r2, r0
   826ac:	4315      	orrs	r5, r2
   826ae:	2e02      	cmp	r6, #2
   826b0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   826b4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   826b8:	d01e      	beq.n	826f8 <__register_exitproc+0x7c>
   826ba:	1c83      	adds	r3, r0, #2
   826bc:	6061      	str	r1, [r4, #4]
   826be:	2000      	movs	r0, #0
   826c0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   826c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   826c8:	4b14      	ldr	r3, [pc, #80]	; (8271c <__register_exitproc+0xa0>)
   826ca:	b303      	cbz	r3, 8270e <__register_exitproc+0x92>
   826cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   826d0:	f7ff f9a6 	bl	81a20 <malloc>
   826d4:	4604      	mov	r4, r0
   826d6:	b1d0      	cbz	r0, 8270e <__register_exitproc+0x92>
   826d8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   826dc:	2700      	movs	r7, #0
   826de:	e884 0088 	stmia.w	r4, {r3, r7}
   826e2:	4638      	mov	r0, r7
   826e4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   826e8:	2101      	movs	r1, #1
   826ea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   826ee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   826f2:	2e00      	cmp	r6, #0
   826f4:	d0e1      	beq.n	826ba <__register_exitproc+0x3e>
   826f6:	e7d1      	b.n	8269c <__register_exitproc+0x20>
   826f8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   826fc:	431a      	orrs	r2, r3
   826fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   82702:	e7da      	b.n	826ba <__register_exitproc+0x3e>
   82704:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   82708:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8270c:	e7c1      	b.n	82692 <__register_exitproc+0x16>
   8270e:	f04f 30ff 	mov.w	r0, #4294967295
   82712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82716:	bf00      	nop
   82718:	00082874 	.word	0x00082874
   8271c:	00081a21 	.word	0x00081a21

00082720 <_close_r>:
   82720:	b538      	push	{r3, r4, r5, lr}
   82722:	4c07      	ldr	r4, [pc, #28]	; (82740 <_close_r+0x20>)
   82724:	2300      	movs	r3, #0
   82726:	4605      	mov	r5, r0
   82728:	4608      	mov	r0, r1
   8272a:	6023      	str	r3, [r4, #0]
   8272c:	f7fe f908 	bl	80940 <_close>
   82730:	1c43      	adds	r3, r0, #1
   82732:	d000      	beq.n	82736 <_close_r+0x16>
   82734:	bd38      	pop	{r3, r4, r5, pc}
   82736:	6823      	ldr	r3, [r4, #0]
   82738:	2b00      	cmp	r3, #0
   8273a:	d0fb      	beq.n	82734 <_close_r+0x14>
   8273c:	602b      	str	r3, [r5, #0]
   8273e:	bd38      	pop	{r3, r4, r5, pc}
   82740:	20070a3c 	.word	0x20070a3c

00082744 <_fclose_r>:
   82744:	2900      	cmp	r1, #0
   82746:	d03d      	beq.n	827c4 <_fclose_r+0x80>
   82748:	b570      	push	{r4, r5, r6, lr}
   8274a:	4605      	mov	r5, r0
   8274c:	460c      	mov	r4, r1
   8274e:	b108      	cbz	r0, 82754 <_fclose_r+0x10>
   82750:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82752:	b37b      	cbz	r3, 827b4 <_fclose_r+0x70>
   82754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82758:	b90b      	cbnz	r3, 8275e <_fclose_r+0x1a>
   8275a:	2000      	movs	r0, #0
   8275c:	bd70      	pop	{r4, r5, r6, pc}
   8275e:	4621      	mov	r1, r4
   82760:	4628      	mov	r0, r5
   82762:	f7fe fcb1 	bl	810c8 <__sflush_r>
   82766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82768:	4606      	mov	r6, r0
   8276a:	b133      	cbz	r3, 8277a <_fclose_r+0x36>
   8276c:	69e1      	ldr	r1, [r4, #28]
   8276e:	4628      	mov	r0, r5
   82770:	4798      	blx	r3
   82772:	2800      	cmp	r0, #0
   82774:	bfb8      	it	lt
   82776:	f04f 36ff 	movlt.w	r6, #4294967295
   8277a:	89a3      	ldrh	r3, [r4, #12]
   8277c:	061b      	lsls	r3, r3, #24
   8277e:	d41c      	bmi.n	827ba <_fclose_r+0x76>
   82780:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82782:	b141      	cbz	r1, 82796 <_fclose_r+0x52>
   82784:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82788:	4299      	cmp	r1, r3
   8278a:	d002      	beq.n	82792 <_fclose_r+0x4e>
   8278c:	4628      	mov	r0, r5
   8278e:	f7fe fe3f 	bl	81410 <_free_r>
   82792:	2300      	movs	r3, #0
   82794:	6323      	str	r3, [r4, #48]	; 0x30
   82796:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82798:	b121      	cbz	r1, 827a4 <_fclose_r+0x60>
   8279a:	4628      	mov	r0, r5
   8279c:	f7fe fe38 	bl	81410 <_free_r>
   827a0:	2300      	movs	r3, #0
   827a2:	6463      	str	r3, [r4, #68]	; 0x44
   827a4:	f7fe fdce 	bl	81344 <__sfp_lock_acquire>
   827a8:	2300      	movs	r3, #0
   827aa:	81a3      	strh	r3, [r4, #12]
   827ac:	f7fe fdcc 	bl	81348 <__sfp_lock_release>
   827b0:	4630      	mov	r0, r6
   827b2:	bd70      	pop	{r4, r5, r6, pc}
   827b4:	f7fe fdc0 	bl	81338 <__sinit>
   827b8:	e7cc      	b.n	82754 <_fclose_r+0x10>
   827ba:	6921      	ldr	r1, [r4, #16]
   827bc:	4628      	mov	r0, r5
   827be:	f7fe fe27 	bl	81410 <_free_r>
   827c2:	e7dd      	b.n	82780 <_fclose_r+0x3c>
   827c4:	2000      	movs	r0, #0
   827c6:	4770      	bx	lr

000827c8 <_fstat_r>:
   827c8:	b538      	push	{r3, r4, r5, lr}
   827ca:	460b      	mov	r3, r1
   827cc:	4c07      	ldr	r4, [pc, #28]	; (827ec <_fstat_r+0x24>)
   827ce:	4605      	mov	r5, r0
   827d0:	4611      	mov	r1, r2
   827d2:	4618      	mov	r0, r3
   827d4:	2300      	movs	r3, #0
   827d6:	6023      	str	r3, [r4, #0]
   827d8:	f7fe f8b6 	bl	80948 <_fstat>
   827dc:	1c43      	adds	r3, r0, #1
   827de:	d000      	beq.n	827e2 <_fstat_r+0x1a>
   827e0:	bd38      	pop	{r3, r4, r5, pc}
   827e2:	6823      	ldr	r3, [r4, #0]
   827e4:	2b00      	cmp	r3, #0
   827e6:	d0fb      	beq.n	827e0 <_fstat_r+0x18>
   827e8:	602b      	str	r3, [r5, #0]
   827ea:	bd38      	pop	{r3, r4, r5, pc}
   827ec:	20070a3c 	.word	0x20070a3c

000827f0 <_isatty_r>:
   827f0:	b538      	push	{r3, r4, r5, lr}
   827f2:	4c07      	ldr	r4, [pc, #28]	; (82810 <_isatty_r+0x20>)
   827f4:	2300      	movs	r3, #0
   827f6:	4605      	mov	r5, r0
   827f8:	4608      	mov	r0, r1
   827fa:	6023      	str	r3, [r4, #0]
   827fc:	f7fe f8aa 	bl	80954 <_isatty>
   82800:	1c43      	adds	r3, r0, #1
   82802:	d000      	beq.n	82806 <_isatty_r+0x16>
   82804:	bd38      	pop	{r3, r4, r5, pc}
   82806:	6823      	ldr	r3, [r4, #0]
   82808:	2b00      	cmp	r3, #0
   8280a:	d0fb      	beq.n	82804 <_isatty_r+0x14>
   8280c:	602b      	str	r3, [r5, #0]
   8280e:	bd38      	pop	{r3, r4, r5, pc}
   82810:	20070a3c 	.word	0x20070a3c

00082814 <_lseek_r>:
   82814:	b570      	push	{r4, r5, r6, lr}
   82816:	460d      	mov	r5, r1
   82818:	4c08      	ldr	r4, [pc, #32]	; (8283c <_lseek_r+0x28>)
   8281a:	4611      	mov	r1, r2
   8281c:	4606      	mov	r6, r0
   8281e:	461a      	mov	r2, r3
   82820:	4628      	mov	r0, r5
   82822:	2300      	movs	r3, #0
   82824:	6023      	str	r3, [r4, #0]
   82826:	f7fe f897 	bl	80958 <_lseek>
   8282a:	1c43      	adds	r3, r0, #1
   8282c:	d000      	beq.n	82830 <_lseek_r+0x1c>
   8282e:	bd70      	pop	{r4, r5, r6, pc}
   82830:	6823      	ldr	r3, [r4, #0]
   82832:	2b00      	cmp	r3, #0
   82834:	d0fb      	beq.n	8282e <_lseek_r+0x1a>
   82836:	6033      	str	r3, [r6, #0]
   82838:	bd70      	pop	{r4, r5, r6, pc}
   8283a:	bf00      	nop
   8283c:	20070a3c 	.word	0x20070a3c

00082840 <_read_r>:
   82840:	b570      	push	{r4, r5, r6, lr}
   82842:	460d      	mov	r5, r1
   82844:	4c08      	ldr	r4, [pc, #32]	; (82868 <_read_r+0x28>)
   82846:	4611      	mov	r1, r2
   82848:	4606      	mov	r6, r0
   8284a:	461a      	mov	r2, r3
   8284c:	4628      	mov	r0, r5
   8284e:	2300      	movs	r3, #0
   82850:	6023      	str	r3, [r4, #0]
   82852:	f7fd fc7d 	bl	80150 <_read>
   82856:	1c43      	adds	r3, r0, #1
   82858:	d000      	beq.n	8285c <_read_r+0x1c>
   8285a:	bd70      	pop	{r4, r5, r6, pc}
   8285c:	6823      	ldr	r3, [r4, #0]
   8285e:	2b00      	cmp	r3, #0
   82860:	d0fb      	beq.n	8285a <_read_r+0x1a>
   82862:	6033      	str	r3, [r6, #0]
   82864:	bd70      	pop	{r4, r5, r6, pc}
   82866:	bf00      	nop
   82868:	20070a3c 	.word	0x20070a3c
   8286c:	00000042 	.word	0x00000042
   82870:	00000043 	.word	0x00000043

00082874 <_global_impure_ptr>:
   82874:	20070130 0000000a                       0.. ....

0008287c <_init>:
   8287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8287e:	bf00      	nop
   82880:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82882:	bc08      	pop	{r3}
   82884:	469e      	mov	lr, r3
   82886:	4770      	bx	lr

00082888 <__init_array_start>:
   82888:	000810a9 	.word	0x000810a9

0008288c <__frame_dummy_init_array_entry>:
   8288c:	00080119                                ....

00082890 <_fini>:
   82890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82892:	bf00      	nop
   82894:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82896:	bc08      	pop	{r3}
   82898:	469e      	mov	lr, r3
   8289a:	4770      	bx	lr

0008289c <__fini_array_start>:
   8289c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00082870 00000000 00000000 00000000     p(..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <__malloc_av_>:
	...
20070564:	2007055c 2007055c 20070564 20070564     \.. \.. d.. d.. 
20070574:	2007056c 2007056c 20070574 20070574     l.. l.. t.. t.. 
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 

20070964 <__malloc_trim_threshold>:
20070964:	00020000                                ....

20070968 <__malloc_sbrk_base>:
20070968:	ffffffff                                ....
